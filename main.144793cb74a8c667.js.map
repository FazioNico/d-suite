{"version":3,"file":"main.144793cb74a8c667.js","mappings":"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","sources":["./apps/browser/src/app/app.guard.ts","./apps/browser/src/app/app.module.ts","./apps/browser/src/app/app.routes.ts","./apps/browser/src/app/components/app/app.component.ts","./apps/browser/src/app/components/app/app.component.html","./apps/browser/src/app/components/dashboard/dashboard.component.ts","./apps/browser/src/app/components/dashboard/dashboard.component.html","./apps/browser/src/app/components/index.ts","./apps/browser/src/app/components/update/update.component.ts","./apps/browser/src/app/pipes/address-to-avatar.pipe.ts","./apps/browser/src/app/providers/api-config.provider.ts","./apps/browser/src/app/providers/authentication.provider.ts","./apps/browser/src/app/providers/communication.provider.ts","./apps/browser/src/app/providers/database.provider.ts","./apps/browser/src/app/providers/encryption.provider.ts","./apps/browser/src/app/providers/error.provider.ts","./apps/browser/src/app/providers/index.ts","./apps/browser/src/app/providers/is-prod.provider.ts","./apps/browser/src/app/providers/loader.provider.ts","./apps/browser/src/app/providers/media-storage.provider.ts","./apps/browser/src/app/providers/strategy.provider.ts","./apps/browser/src/app/services/datastore.service.ts","./apps/browser/src/app/services/did-encryption.service.ts","./apps/browser/src/app/services/did.service.ts","./apps/browser/src/app/services/global-error-handler.service.ts","./apps/browser/src/app/services/index.ts","./apps/browser/src/app/services/ipfs.service.ts","./apps/browser/src/app/services/notification.service.ts","./apps/browser/src/app/services/pinata.service.ts","./apps/browser/src/app/services/prompt-strategy.service.ts","./apps/browser/src/app/services/web3-auth.service.ts","./apps/browser/src/app/services/web3storage.service.ts","./apps/browser/src/app/services/xmtp.service.ts","./apps/browser/src/app/strategies/encryption.strategy.ts","./apps/browser/src/app/strategies/index.ts","./apps/browser/src/app/strategies/ipfs-pinning.strategy.ts","./apps/browser/src/environments/environment.prod.ts","./apps/browser/src/main.ts","./libs/interfaces/src/lib/abstracts/strategy.ts","./libs/interfaces/src/lib/interfaces.ts","./libs/token-injection/src/index.ts","./libs/token-injection/src/lib/token-injection.ts","./libs/token-injection/src/lib/token.enum.ts","./node_modules/@ionic/core/dist/esm/ lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","./node_modules/@ionic/pwa-elements/dist/esm/ lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/@metamask/eth-sig-util/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/asn1.js/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams|util","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/browserify-sign/node_modules/readable-stream/lib|util","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/create-ecdh/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/diffie-hellman/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/elliptic/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/hash-base/node_modules/readable-stream/lib/internal/streams|util","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/hash-base/node_modules/readable-stream/lib|util","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/ipfs-core/src|ipfs-utils/src/files/glob-source.js","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/ipfs-http-client/src|ipfs-utils/src/files/glob-source.js","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/miller-rabin/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/public-encrypt/node_modules/bn.js/lib|buffer","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/rate-limiter-flexible/lib|cluster","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/stream-browserify/node_modules/readable-stream/lib/internal/streams|util","ignored|/Users/dev-fazio/Nicolas Fazio/repos/hexa/node_modules/stream-browserify/node_modules/readable-stream/lib|util"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { filter, firstValueFrom } from 'rxjs';\nimport {\n  IIdentityService,\n  IAuthGuardService\n} from '@hexa/interfaces';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\n\n@Injectable()\nexport class AppGuard implements CanActivate {\n  private readonly _router = inject(Router);\n  private readonly _authService = inject<IAuthGuardService>(\n    getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE)\n  );\n  private readonly _didService = inject<IIdentityService>(\n    getInjectionToken(TOKENS_NAME.APP_DID_SERVICE)\n  );\n\n  async canActivate(): Promise<boolean> {\n    let canActivateThisRoute = false;\n    const isAuthenticate = this._didService?.did$?.value?.authenticated;\n    if (!isAuthenticate) {\n      const isReconnected = await this._isReconnect();\n      if (isReconnected === true) {\n        canActivateThisRoute = true;\n      } else {\n        await this._router.navigate(['/auth/login']);\n        canActivateThisRoute = false;\n      }\n    } else {\n      canActivateThisRoute = true;\n    }\n    return canActivateThisRoute;\n  }\n\n  private async _isReconnect() {\n    const data = window.localStorage.getItem('connectedWallets');\n    if (!data) {\n      return false;\n    }\n    const previouslyConnectedWallets = JSON.parse(data);\n    if (!previouslyConnectedWallets) {\n      return false;\n    }\n    // Connect the most recently connected wallet (first in the array)\n    await this._authService.connectWallet(previouslyConnectedWallets[0]);\n    await firstValueFrom(\n      this._authService.isWaiting$.pipe(filter((isWaiting) => !isWaiting))\n    );\n    const isAuthenticate = this._didService?.did$?.value?.authenticated;\n    return isAuthenticate;\n  }\n}\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { IonicModule } from '@ionic/angular';\n\nimport { appRoutes } from './app.routes';\nimport { AppGuard } from './app.guard';\nimport { COMPONENTS, MAIN_COMPONENT } from './components';\nimport { environment } from '../environments/environment';\nimport { PROVIDERS } from './providers';\nimport { PIPES } from './pipes';\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS,\n    ...PIPES,\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    IonicModule.forRoot({\n      mode: 'ios',\n    }),\n    RouterModule.forRoot(appRoutes, {\n      initialNavigation: 'enabledBlocking',\n      useHash: true,\n    }),\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the application is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000',\n    }),\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [\n    AppGuard,\n    ...PROVIDERS,\n  ],\n  bootstrap: [MAIN_COMPONENT],\n})\nexport class AppModule {}\n","import { Route } from '@angular/router';\nimport { AppGuard } from './app.guard';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\n\nexport const appRoutes: Route[] = [\n  {\n    path: '',\n    children: [\n      {\n        path: 'auth',\n        loadChildren: () => import('@hexa/auth').then(m => m.AuthModule)\n      },\n      {\n        path: 'ipfs',\n        // loadComponent: () => import('./components/ipfs/ipfs.component').then(m => m.IpfsComponent),\n        children: [\n          {\n            path: ':cid',\n            loadComponent: () => import('./components/ipfs/ipfs.component').then(m => m.IpfsComponent),\n\n          }\n        ]\n      },\n      {\n        path: 'h',\n        component: DashboardComponent,\n        canActivate: [AppGuard],\n        children: [\n          {\n            path: 'dashboard',\n            loadChildren: () => import('@hexa/welcome').then(m => m.WelcomeModule)\n          },\n          {\n            path: 'calendar',\n            loadChildren: () => import('@hexa/calendar').then(m => m.CalendarModule)\n          },\n          {\n            path: 'drive',\n            loadChildren: () => import('@hexa/drive').then(m => m.DriveModule)\n          },\n          {\n            path: 'wallet',\n            loadChildren: () => import('@hexa/wallet').then(m => m.WalletModule)\n          },\n          {\n            path: 'notes',\n            loadChildren: () => import('@hexa/notes').then(m => m.NotesModule)\n          },\n          {\n            path: '',\n            redirectTo: 'dashboard',\n            pathMatch: 'full'\n          }\n        ]\n      },\n      {\n        path: '',\n        redirectTo: '/auth/login',\n        pathMatch: 'full'\n      }\n    ]\n  },\n];\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { EnvironmentInjector } from '@angular/core';\nimport { ILoadingService } from '@hexa/interfaces';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\nimport { environment } from '../../../environments/environment';\nimport '@khmyznikov/pwa-install';\n\n@Component({\n  selector: 'hexa-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    public readonly environmentInjector: EnvironmentInjector,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_IS_PROD))\n    public readonly isProd: boolean,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_LOADER_SERVICE))\n    public readonly loaderService: ILoadingService\n  ) {}\n\n  ngOnInit(): void {\n    const version = environment.version;\n    const env = `[INFO] hexa PWA APP\\nVersion: ${version} - ${\n      this.isProd ? 'PROD' : 'DEV'\n    }`;\n    (window as any)['env'] = env;\n    console.log(env);\n  }\n}\n","<ion-router-outlet\n  [environmentInjector]=\"environmentInjector\"\n></ion-router-outlet>\n<ion-progress-bar\n  *ngIf=\"loaderService.isVisible$ | async\"\n  type=\"indeterminate\"\n></ion-progress-bar>\n<pwa-install manifest-url=\"./manifest.webmanifest\"></pwa-install>\n<hexa-update></hexa-update>\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IAuthService, INotificationService, IPromptStrategyService } from '@hexa/interfaces';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\nimport { AlertController, IonPopover, IonToggle, LoadingController, ToastController } from '@ionic/angular';\nimport { environment } from '../../../environments/environment';\nimport { BehaviorSubject, firstValueFrom, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'hexa-dashboard',\n  templateUrl: `./dashboard.component.html`,\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  // public routerUrl$: Observable<string>;\n  public isDarkMode$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  public version = (environment.production ? '' : '[DEV]') + `${environment.version}`;\n  public features = [\n    // {name: 'home', url: 'dashboard', sort: 0, isEnabled: false, isVisible: false},\n    {name: 'folder-open', url: 'drive', sort: 5, isEnabled: true, isVisible: true},\n    {name: 'wallet-sharp', url: 'wallet', sort: 10, isEnabled: true, isVisible: true},\n    {name: 'calendar-number', url: 'calendar', sort: 20, isEnabled: true, isVisible: false},\n    {name: 'clipboard', url: 'notes', sort: 25, isEnabled: true, isVisible: false},\n    {name: 'chatbubbles', url: 'chat', sort: 30, isEnabled: false, isVisible: false},\n    {name: 'checkbox', url: 'todos', sort: 40, isEnabled: false, isVisible: false},\n    // {name: 'add', url: 'add', sort: 100, isEnabled: false, isVisible: true},\n  ]\n  .sort((a,b) => a.sort - b.sort)\n  .filter(f => f.isVisible);\n  public readonly isNotifEnabled$ = this._notificationService.isConnected$;\n  public readonly account$ = this._authService.account$;\n  private readonly _subs: Subscription[] = [];\n\n  constructor(\n    private readonly _router: Router,\n    private readonly _route: ActivatedRoute,\n    private readonly _toastService: ToastController,\n    @Inject(DOCUMENT) private readonly _document: Document,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE)) private readonly _authService: IAuthService,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_NOTIFICATION_SERVICE)) private readonly _notificationService: INotificationService,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_PROMPT_STRATEGY_SERVICE)) private readonly _promptStrategy: IPromptStrategyService,\n    ) {}\n\n  ngOnInit() {\n    this._checkDarkModeSetting();\n    const sub = this._notificationService.notifications$.subscribe(\n      async (messages) => {\n        if (messages.length === 1) {\n          await this.displayNotification(messages[0]);\n        } else if (messages.length > 1) {\n          const content = `You have ${messages.length} new notifications`;\n          await this.displayNotification(content);\n        }\n      }\n    );\n    this._subs.push(sub);\n    const { params: {id: _id = null} = {}} = this._route.snapshot.parent||{};\n    // this.routerUrl$ = this._router.events.pipe(\n    //   // filter only navigation end events\n    //   filter((event) => event instanceof NavigationEnd),\n    //   map((event: NavigationEnd) => {\n    //     return event?.url;\n    //   }),\n    //   filter(url => !!url),\n    //   // trick to manage first navigation enter on MainPage from other module\n    //   // Force with default pannel url to prevent incorrect display color for active link \n    //   map(url =>  (url.match(/\\//g)||'').length > 2 ? url : url + '/settings'),\n    // );\n  }\n\n  ngOnDestroy(): void {\n    this._subs.forEach((sub) => sub.unsubscribe());\n  }\n\n  togglePage(path: string) {    \n    const {id: streamId} = this._route.snapshot.params;\n    this._router.navigate([`/h/${path}`])\n  }\n\n  async toogleNotification(popoverElement: IonPopover, toggleElement: IonToggle) {\n    // disable element to prevent multiple click\n    toggleElement.disabled = true;\n    let message = '';\n    const isConnected = await firstValueFrom(this._notificationService.isConnected$);\n    if (isConnected) {\n      await this._notificationService.disconnect();\n      message = `Notifications are disabled`; \n    } else {\n      message = await this._notificationService\n      .connect()\n      .then(() => `Notifications are  enabled`)\n      .catch(() =>  'Failed to enable notifications');\n    }\n    // do not miss to enable element back\n    await popoverElement.dismiss();\n    await this.displayNotification(message);\n    toggleElement.disabled = false;\n  }\n\n  async displayNotification(message: string) {\n    const ionToast = await this._toastService.create({\n      message,\n      duration: 5000,\n      cssClass: 'notification-toast',\n      icon: 'information-circle-outline',\n      position: 'top',\n      buttons: [\n        {\n          text: 'ok',\n          role: 'cancel',\n        },\n      ],\n    });\n    await ionToast.present();\n  }\n\n  async setupIPFSPinService(popoverElement: IonPopover) {\n    // close popover\n    popoverElement.dismiss();\n    // extract user data\n    const userData = this._authService.profile$.value;\n    // check existing config for pining servcie and reset value if needed\n    const config = await this._promptStrategy.askSetupService();\n    if (config?.token === '' ) {\n      config.serviceName = '';\n    }\n    if (!config) {\n      return;\n    }\n    // save user config to user base\n    await this._authService.updateProfilData({\n      ...userData,\n      ipfsConfig: {\n        ...config\n      }\n    });\n  }\n\n  async disconnect() {\n    await this._authService.disconnect();\n  }\n\n  async toggleDarkMode($event: any) {\n    // toggle dark mode class\n    this._document.body.classList.toggle('dark');\n    // get current dark mode value and save it to local storage\n    const isDarkmode = this._document.body.classList.contains('dark');\n    this._document.defaultView?.localStorage.setItem('hexa:darkMode', isDarkmode.toString());\n    // update dark mode value\n    this.isDarkMode$.next(isDarkmode);\n  }\n\n  copyAccountAddressToClipboard() {\n    const account = this._authService.account$.value;\n    if (account) {\n      navigator.clipboard.writeText(account);\n      // display toast\n      this._toastService.create({\n        message: 'Account address copied to clipboard',\n        duration: 2000,\n        color: 'success',\n        position: 'bottom',\n      }).then((toast) => toast.present());\n    }\n  }\n\n  private _checkDarkModeSetting() {\n    const isSettingSaved = this._document.defaultView?.localStorage.getItem('hexa:darkMode');\n    if (!isSettingSaved) {\n      this.isDarkMode$.next(this._document.body.classList.contains('dark'));\n      return;\n    } \n    if (isSettingSaved === 'true') {\n      this._document.body.classList.add('dark');\n      this.isDarkMode$.next(true);\n    } else {\n      this._document.body.classList.remove('dark');\n      this.isDarkMode$.next(false);\n    }\n  }\n}\n","<ion-split-pane contentId=\"main\" when=\"sm\">\n  <ion-menu contentId=\"main\" #menuElement>\n    <ion-header class=\"ion-no-border\">\n      <ion-toolbar>\n        <ion-img \n          (click)=\"togglePage('dashboard'); menuElement.close()\" \n          class=\"logo\" \n          src=\"./assets/images/logo.svg\"></ion-img>\n        <ion-chip>\n          beta\n        </ion-chip>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content [fullscreen]=\"true\" color=\"primary\">\n      <div class=\"centervert\">\n        <ion-button\n          fill=\"clear\"\n          expand=\"block\"\n          size=\"large\"\n          class=\"link\"\n          *ngFor=\"let feature of features; let i = index\"\n          [disabled]=\"!feature.isEnabled\"\n          (click)=\"togglePage(feature.url); menuElement.close()\"\n          routerLinkActive=\"active-link\"\n        >\n          <ion-icon\n            slot=\"icon-only\"\n            [name]=\"feature.name\"\n          ></ion-icon>\n        </ion-button>\n      </div>\n    </ion-content>\n    <ion-footer class=\"ion-no-border\">\n      <ion-toolbar>\n        <!-- <ion-button fill=\"clear\" (click)=\"toogleNotification()\">\n          <ion-icon\n            slot=\"icon-only\"\n            color=\"light\"\n            size=\"small\"\n            [name]=\"\n              (isNotifEnabled$ | async)\n                ? 'notifications-outline'\n                : 'notifications-off-outline'\n            \"\n          ></ion-icon>\n        </ion-button> -->\n        <ion-button id=\"setting-options\" fill=\"clear\">\n          <ion-icon\n            slot=\"icon-only\"\n            color=\"light\"\n            size=\"small\"\n            name=\"settings-outline\"\n          ></ion-icon>\n        </ion-button>\n        <ion-popover \n          trigger=\"setting-options\" \n          triggerAction=\"click\" \n          #popoverSettingElement\n          size=\"auto\"\n          mode=\"md\"\n          [keepContentsMounted]=\"true\"\n          [dismissOnSelect]=\"true\">\n          <ng-template>\n            <ion-content class=\"ion-no-padding\" mode=\"ios\">\n              <ion-list lines=\"none\" class=\"ion-no-padding ion-margin-bottom\">\n                <ion-list-header class=\"ion-margin-bottom\">\n                  <ion-label>\n                    Global Settings\n                    <p>\n                      <small>HEXA {{version}}</small>\n                    </p>\n                  </ion-label>\n                </ion-list-header>\n                <ion-item button \n                (click)=\"setupIPFSPinService(popoverSettingElement)\">\n                  <ion-label>\n                    <h3>Pin service</h3>\n                    <p>\n                      Manage IPFS pinning service\n                    </p>\n                  </ion-label>\n                </ion-item>\n                <ion-item>\n                  <!-- <ion-icon\n                    slot=\"start\"\n                    [name]=\"\n                      (isNotifEnabled$ | async)\n                        ? 'notifications-outline'\n                        : 'notifications-off-outline'\n                    \"\n                  ></ion-icon> -->\n                  <ion-label>\n                    <h3>Notifications</h3>\n                    <p>\n                      Enable or disable\n                    </p>\n                  </ion-label>\n                  <ion-toggle\n                    #toggleNotifElement\n                    slot=\"end\"\n                    size=\"small\"\n                    [checked]=\"isNotifEnabled$ | async\"\n                    (click)=\"toogleNotification(popoverSettingElement, toggleNotifElement)\"\n                  ></ion-toggle>\n                </ion-item>\n                <ion-item>\n                  <ion-label>\n                    <h3>Dark mode</h3>\n                    <p>\n                      Enable or disable\n                    </p>\n                  </ion-label>\n                  <ion-toggle\n                    slot=\"end\"\n                    [checked]=\"(isDarkMode$ | async)\"\n                    (ionChange)=\"toggleDarkMode($event)\"\n                  ></ion-toggle>\n                </ion-item>\n              </ion-list>\n            </ion-content>\n          </ng-template>\n        </ion-popover>\n      </ion-toolbar>\n    </ion-footer>\n  </ion-menu>\n  <ion-router-outlet id=\"main\" mode=\"md\">\n    <ion-button mode=\"ios\" class=\"authMiniDash\" id=\"profil-trigger\">\n      <ion-icon src=\"./assets/images/logo-colored.svg\"></ion-icon>\n      <ion-img [src]=\"account$.value | addressToAvatar | async\"></ion-img>\n    </ion-button>\n\n    <ion-popover\n      #popOverProfil\n      class=\"profil-popover\"\n      trigger=\"profil-trigger\"\n      size=\"auto\"\n      side=\"bottom\"\n      alignment=\"start\"\n      [keepContentsMounted]=\"true\"\n      [dismissOnSelect]=\"false\"\n    >\n      <ng-template>\n        <ion-content class=\"ion-padding\">\n          <ion-item *ngIf=\"account$.value as accountId\" lines=\"none\" class=\"item-profil\"> \n            <ion-avatar slot=\"start\" >\n              <ion-img\n                [ngClass]=\"{'online': true}\"\n                [src]=\"accountId | addressToAvatar | async\"></ion-img>\n            </ion-avatar>\n            <ion-label class=\"ion-text-nowrap\">\n              <label>\n                <ion-text color=\"medium\">\n                  <small>Connected address</small>\n                </ion-text>\n              </label>\n              {{ accountId.slice(0, 6) }}...{{ accountId.slice(-4) }}\n              <!-- <label>\n                <ion-text color=\"medium\">\n                  <label>\n                    <small>Chain</small>\n                  </label>\n                </ion-text>\n              </label>\n              {{ chainId$ | async | networkName }} -->\n            </ion-label>\n            <ion-buttons\n              slot=\"end\"\n              class=\"ion-no-margin ion-margin-start\"\n              (click)=\"copyAccountAddressToClipboard()\"\n            >\n              <ion-button size=\"small\" fill=\"clear\">\n                <ion-icon\n                  color=\"medium\"\n                  size=\"small\"\n                  slot=\"icon-only\"\n                  name=\"copy-outline\"\n                ></ion-icon>\n              </ion-button>\n            </ion-buttons>\n          </ion-item>\n          <!-- <ion-item lines=\"none\" class=\"ion-margin-top\">\n            <ion-icon size=\"small\" name=\"moon-outline\" slot=\"start\"></ion-icon>\n            <ion-toggle slot=\"end\" color=\"primary\" [checked]=\"darkMode\" (ionChange)=\"toggleDarkMode()\"></ion-toggle>\n            <ion-label>\n              Dark mode\n            </ion-label>\n          </ion-item> -->\n          <ion-item\n            lines=\"none\"\n            class=\"ion-margin-top disconnect-item\"\n            (click)=\"disconnect();popOverProfil.dismiss();\"\n          >\n            <ion-icon slot=\"start\" name=\"log-out-outline\"></ion-icon>\n            <ion-label>\n              <ion-text> Disconnect </ion-text>\n            </ion-label>\n          </ion-item>\n        </ion-content>\n      </ng-template>\n    </ion-popover>\n  </ion-router-outlet>\n</ion-split-pane>\n","import { AppComponent } from './app/app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { UpdateComponent } from './update/update.component';\n\nexport const MAIN_COMPONENT = AppComponent;\n\nexport const COMPONENTS = [\n  MAIN_COMPONENT,\n  DashboardComponent,\n  UpdateComponent\n];","import { Component } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { ToastController, ToastOptions } from '@ionic/angular';\nimport { filter, map, merge, Observable, of, Subject } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'hexa-update',\n  template: `<div *ngIf=\"updateAvailable$ | async\"></div>`,\n  styles: [``],\n})\nexport class UpdateComponent {\n  updateAvailable$: Observable<boolean>;\n  closed$ = new Subject<void>();\n\n  constructor(private updates: SwUpdate, private _toast: ToastController) {\n    console.log('Application updater install: ', environment.production);\n    // create observable to check for updates\n    // if there is an update, display a toast.\n    this.updateAvailable$ = merge(\n      of(false),\n      this.updates.versionUpdates.pipe(\n        filter((e) => e.type === 'VERSION_DETECTED'),\n        map(async () => await this._displayNotif()),\n        map(() => true)\n      ),\n      this.closed$.pipe(map(() => false))\n    );\n  }\n\n  /**\n   * Method to activate the update\n   * and reload the application\n   * @returns\n   */\n  async activateUpdate() {\n    if (!environment.production) {\n      return;\n    }\n    await this.updates.activateUpdate();\n    location.reload();\n  }\n\n  /**\n   * Method to display a toast that will explain to the user\n   * that a new version is available.\n   * When the toast is closed, the update will be activated\n   * and the application will be reloaded. by the dedicated method `activateUpdate`.\n   */\n  private async _displayNotif() {\n    const duration = 1000 * 30; // 30 seconds\n    const data = <ToastOptions>{\n      message: 'New version available!',\n      position: 'bottom',\n      showCloseButton: true,\n      closeButtonText: `Update`,\n      buttons: [{ text: 'Update', role: 'ok' }],\n      duration, // force toasts to close to trigger the update\n    };\n    const toast = await this._toast.create(data);\n    await toast.present();\n    await toast.onDidDismiss();\n    this.activateUpdate();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'addressToAvatar'\n})\nexport class AddressToAvatarPipe implements PipeTransform {\n\n  async transform(value?: string, theme: 'jazzicons'|'blockies' = 'blockies'): Promise<string> {\n    if (!value) {\n      return '';\n    }\n    if (theme === 'jazzicons') {\n      // return import('@metamask/jazzicon').then(jazzicon => jazzicon.default( 97, value ));\n      throw 'Not implemented';\n    } else {\n      return import('ethereum-blockies-base64').then(blockies => blockies.default(value));\n    }    \n  }\n\n}","import { Provider } from \"@angular/core\";\nimport { IPiningServiceConfig } from \"@hexa/interfaces\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { environment } from \"../../environments/environment\";\n\nconst defaultValue: IPiningServiceConfig = {\n  token: environment?.ipfs.pinning_service_token||'',\n  serviceName: 'default-pinata',\n}\n\nexport const API_CONFIG_PROVIDER: Provider[] = [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_WALLET_SERVICE_APIKEYS),\n    useValue: environment.wallet\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_PINNING_SERVICE_DEFAULT_CONFIG),\n    useValue: defaultValue,\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_AUTH_APIKEY),\n    useValue: environment?.auth?.apikey,\n  }\n]","import { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\n\nimport { DIDService, Web3AuthService, LocalAuthService, LocalDIDServcie } from \"../services\";\nimport { Provider } from '@angular/core';\nimport { environment } from '../../environments/environment';\n\nexport const AUTHENTICATION_PROVIDER: Provider[] = [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_DID_SERVICE),\n    useClass: (environment?.version?.includes('local')||false) \n      ? LocalDIDServcie \n      : DIDService,\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE),\n    useClass: (environment?.version?.includes('local')||false) \n      ? LocalAuthService \n      : Web3AuthService\n  },\n  \n];","import { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { NotificationService, XMTPService } from \"../services\";\n\nexport const COMMUNICATION_PROVIDER = [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_MESSAGING_SERVICE),\n    useClass: XMTPService,\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_NOTIFICATION_SERVICE),\n    useClass: NotificationService,\n  },\n];","import { Provider } from \"@angular/core\";\nimport { CeramicClient } from \"@ceramicnetwork/http-client\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { environment } from \"../../environments/environment\";\nimport { DatastoreService, LocalDatastoreServcie } from \"../services\";\n\nexport const DATABASE_PROVIDER: Provider[] = [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_CERAMIC_SERVICE),\n    useFactory: () => {\n      const public_node = 'https://ceramic-clay.3boxlabs.com';\n      const hexaCeramicNode = 'http://ec2-35-171-157-60.compute-1.amazonaws.com:7007';\n      const CERAMIC_CLIENT = new CeramicClient(public_node);\n      return (environment?.version?.includes('local')||false) \n        ? null\n        : CERAMIC_CLIENT;\n    },\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_DATASTORE_SERVICE),\n    useClass: (environment?.version?.includes('local')||false)\n      ? LocalDatastoreServcie\n      : DatastoreService\n  },\n];","import { IEncryptionService } from \"@hexa/interfaces\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { environment } from \"../../environments/environment\";\nimport { DIDEncryptionService, LocalEncryptionService } from \"../services\";\nimport { EncryptionStrategy } from \"../strategies\";\n\nexport const ENCRYPTION_PROVIDER = [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_DID_ENCRYPTION_SERVICE),\n    useClass: (environment?.version?.includes('local')||false)\n      ? LocalEncryptionService\n      : DIDEncryptionService\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_ENCRYPTION_SERVICE),\n    useFactory: (encryptLib: IEncryptionService): EncryptionStrategy => {\n      // setup default encryption strategy with DID Encryption Service.\n      // You can change this to use a different encryption service \n      // by calling setStrategy() on the EncryptionStrategy instance.\n      const strategy = new EncryptionStrategy();\n      strategy.setStrategy(encryptLib);\n      return strategy;\n    },\n    deps: [getInjectionToken(TOKENS_NAME.APP_DID_ENCRYPTION_SERVICE)],\n  },\n];","import { ErrorHandler } from \"@angular/core\";\nimport { environment } from \"../../environments/environment\";\nimport { GlobalErrorHandlerService } from \"../services\";\n\nexport const ERROR_PROVIDER = environment.production\n  ? [\n      {\n        provide: ErrorHandler,\n        useClass: GlobalErrorHandlerService,\n      },\n    ]\n  : [];","import { EnvironmentProviders, Provider } from \"@angular/core\";\nimport { ERROR_PROVIDER } from \"./error.provider\";\nimport { IS_PROD_PROVIDER } from \"./is-prod.provider\";\nimport { LOADER_PROVIDER } from \"./loader.provider\";\nimport { API_CONFIG_PROVIDER } from \"./api-config.provider\";\nimport { AUTHENTICATION_PROVIDER } from \"./authentication.provider\";\nimport { ENCRYPTION_PROVIDER } from \"./encryption.provider\";\nimport { DATABASE_PROVIDER } from \"./database.provider\";\nimport { COMMUNICATION_PROVIDER } from \"./communication.provider\";\nimport { MEDIA_STORAGE_PROVIDER } from \"./media-storage.provider\";\nimport { PROMPT_STRATEGY_PROVIDER } from \"./strategy.provider\";\n\nexport const PROVIDERS: (Provider | EnvironmentProviders)[]  = [\n  ...PROMPT_STRATEGY_PROVIDER, // zero dependency first\n  ...API_CONFIG_PROVIDER,\n  ...AUTHENTICATION_PROVIDER,\n  ...DATABASE_PROVIDER,\n  ...COMMUNICATION_PROVIDER,\n  ...ENCRYPTION_PROVIDER,\n  ...ERROR_PROVIDER,\n  ...IS_PROD_PROVIDER,\n  ...LOADER_PROVIDER,\n  ...MEDIA_STORAGE_PROVIDER,\n];","import { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { environment } from \"../../environments/environment\";\n\nexport const IS_PROD_PROVIDER = [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_IS_PROD),\n    useValue: environment.production,\n  },\n]","import { ILoadingService } from \"@hexa/interfaces\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { BehaviorSubject, debounceTime, distinctUntilChanged } from \"rxjs\";\n\nexport const LOADER_PROVIDER = [{\n  provide: getInjectionToken(TOKENS_NAME.APP_LOADER_SERVICE),\n  useFactory: (): ILoadingService => {\n    // Create a loader service that can be used to show/hide \n    // a loading indicator in the UI. \n    // This is a simple example that uses a BehaviorSubject to\n    // emit a boolean value that can be subscribed to by the UI.\n    const LOADERCLIENT = new BehaviorSubject<boolean>(false);\n    return {\n      setStatus: (status: boolean) => {\n        console.log('Loader status: ', status);\n        LOADERCLIENT.next(status);\n      },\n      isVisible$: LOADERCLIENT.asObservable().pipe(\n        debounceTime(250),\n        distinctUntilChanged()\n      ),\n    };\n  },\n}];","import { EnvironmentProviders, Provider } from \"@angular/core\";\nimport { IAuthService, IPiningService } from \"@hexa/interfaces\";\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\nimport { environment } from \"../../environments/environment\";\nimport { IPFSService, PinataService, LocalIPFSService } from \"../services\";\nimport { Web3storageService } from \"../services/web3storage.service\";\nimport { IPFSPinningStrategy } from \"../strategies\";\n\nexport const MEDIA_STORAGE_PROVIDER: (Provider | EnvironmentProviders)[]= [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_PINATA_SERVICE),\n    useClass: PinataService,\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_WEB3STORAGE_SERVICE),\n    useClass: Web3storageService,\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_IPFS_SERVICE),\n    useClass: (environment?.version?.includes('local')||false)\n      ? LocalIPFSService\n      : IPFSService\n  },\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_IPFS_PINNING_SERVICE),\n    useFactory: (authService: IAuthService, pinata: IPiningService, web3: IPiningService) => {\n      // use default service\n      const profil = authService.profile$.value;\n      const serviceName = profil.ipfsConfig?.serviceName;\n      \n      const mapStrategy = new Map();\n      mapStrategy.set('pinata', pinata);\n      mapStrategy.set('web3storage', web3);\n      \n      const strategy = new IPFSPinningStrategy(mapStrategy);\n      (serviceName) \n        ? strategy.setStrategy<string>(serviceName)\n        : strategy.setStrategy<string>('pinata'); // default service\n      // use local if local\n      return (environment?.version?.includes('local')||false)\n        ? <IPiningService>{\n          pin: async (hash: string) => {\n            console.log(`[LocalIPFSPinningStrategy] pin: ${hash}`);\n          },\n          unpin: async (hash: string) => {\n            console.log(`[LocalIPFSPinningStrategy] unpin: ${hash}`);\n          }\n        }\n        : strategy;\n    },\n    deps: [\n      getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE), \n      getInjectionToken(TOKENS_NAME.APP_PINATA_SERVICE),\n      getInjectionToken(TOKENS_NAME.APP_WEB3STORAGE_SERVICE)\n    ],\n  },\n];","import { EnvironmentProviders, Provider } from \"@angular/core\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { PromptStrategyService } from \"../services/prompt-strategy.service\";\n\nexport const PROMPT_STRATEGY_PROVIDER: (Provider | EnvironmentProviders)[]= [\n  {\n    provide: getInjectionToken(TOKENS_NAME.APP_PROMPT_STRATEGY_SERVICE),\n    useClass: PromptStrategyService,\n  },\n];","import { Inject, Injectable } from \"@angular/core\";\nimport { CeramicClient } from '@ceramicnetwork/http-client';\nimport { DIDDataStore } from '@glazed/did-datastore';\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { IDatastoreService, IIdentityService } from \"@hexa/interfaces\";\nimport { AlertController, LoadingController, ToastController } from \"@ionic/angular\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\n\n@Injectable()\nexport class DatastoreService implements IDatastoreService<DIDDataStore> {\n  \n  public readonly aliases = {\n    schemas: {\n      basicProfile:\n        'ceramic://k3y52l7qbv1frxt706gqfzmq6cbqdkptzk8uudaryhlkf6ly9vx21hqu4r6k1jqio',\n    },\n    definitions: {\n      BasicProfile:\n        'kjzl6cwe1jw145cjbeko9kil8g9bxszjhyde21ob8epxuxkaon1izyqsu8wgcic',\n    },\n    tiles: {},\n  };\n  private readonly _datastore = new DIDDataStore({ \n    ceramic: this._ceramic, \n    model: this.aliases\n  });\n  get datastore() {\n    return this._datastore;\n  }\n \n  constructor(\n    @Inject(getInjectionToken(TOKENS_NAME.APP_CERAMIC_SERVICE)) private readonly _ceramic: CeramicClient,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_DID_SERVICE)) private readonly _did: IIdentityService,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_IS_PROD)) private readonly _isProd: boolean,\n    \n    private readonly _loaderService: LoadingController,\n    private readonly _toastService: ToastController,\n  ) {}\n \n  /**\n   * Wrapper that normalize the object returned by Ceramic database\n   * as a simple object with only the content of the document and the id\n   * This method using DID authentication to load the document with full access (read/write)\n   * @param family \n   * @param tags \n   * @param data \n   * @returns \n   */\n  async getData<T>(family: string, tags: string[], data?: T): Promise<T> {\n    const familyTag = this._isProd ? family : `DEV=${family}`;\n    console.log(`[INFO] {DatastoreService} getData() Query:`, familyTag, tags);    \n    const doc = await this._getDocument<T>(\n      familyTag, \n      tags, \n      data\n    );\n    console.log('[INFO] {DatastoreService} getData() Result: ', doc, doc.id.toString());\n    return {\n      ...doc.content as T,\n      _id: doc.id.toString()\n    };\n  }\n\n  /**\n   * Wrapper that normalize call to load data from Ceramic database\n   * as a simple object with only the content of the document and the id\n   * This method not use authentication and load the document with read only access\n   * @param streamId \n   */\n  async loadData(streamId: string) {\n    const doc = await TileDocument.load(this._ceramic, streamId);\n    return {\n      ...doc,\n      _id: doc.id.toString()\n    };\n  }\n\n  /**\n   * Wrapper that normalize call to save new entry data in Ceramic database\n   * and return the full object of the document\n   * @param data \n   * @param family \n   * @param tags \n   * @returns \n   */\n  async saveData<T>(data: T, family: string, tags: string[]) {\n    const familyTag = this._isProd ? family : `DEV=${family}`;\n    console.log(`[INFO] {DatastoreService} saveData() Query:`, data, familyTag, tags);\n    // Set document controlled by the authenticated DID\n    const controller: string = this._getAuthorizedDidID();\n    if (!controller) throw new Error('Ceramic instance does not have an authenticated DID');\n    // The following call will fail if the Ceramic instance does not have an authenticated DID\n    const doc = await TileDocument.deterministic<T>(\n      this._ceramic, \n      {\n        // A single controller must be provided to reference a deterministic document\n        controllers: [controller],\n        // A family or tag must be provided in addition to the controller\n        family: familyTag,\n        tags,\n      }, \n      {\n        pin: true\n      }\n    );\n    doc.update(data);\n    // const _id = doc.id.toString();\n    // const content = doc.content;\n    return {_id: (data as any)?._id||'temp', ...data};\n  }\n  \n  // async updateUserProfil() {\n    \n  // }\n\n  // private async _init() {}\n\n  /**\n   * Private method that load a document from Ceramic database using deterministic method\n   * and return it as a `TileDocument`\n   * Optionnaly this method can create document content if it does not exist yet and a data object is provided.\n   * @param family \n   * @param tags \n   * @param data \n   * @returns \n   */\n  private async _getDocument<T>(\n    family: string, \n    tags: string[],\n    data?: T, \n  ): Promise<TileDocument<T>> {\n    console.log(`[INFO] {DatastoreService} _getDocument() Query:`, family, tags);\n    // Load the document controlled by the authenticated DID\n    const controller: string = this._getAuthorizedDidID();\n    if (!controller) throw new Error('Ceramic instance does not have an authenticated DID');\n    const doc = await TileDocument.deterministic<T>(this._ceramic, {\n      // A single controller must be provided to reference a deterministic document\n      controllers: [controller],\n      // A family or tag must be provided in addition to the controller\n      family,\n      tags,\n    });\n    // The document has no content as it's created based on metadata only...\n    const haveEmptyContent = doc.content == null || Object.keys(doc.content||{}).length === 0;\n    if (haveEmptyContent && data) {\n      console.log('[INFO] {DatastoreService} No content found, creating new document: ', data); \n      // display message to user\n      const ionLoader = await this._loaderService.create({\n        message: `Creating database document to store your data...`,\n        keyboardClose: false,\n      });\n      await ionLoader.present();\n      // set content with data\n      await doc.update(data);\n      // dismiss message\n      await ionLoader.dismiss();\n      // display toast message\n      const ionToast = await this._toastService.create({\n        message: `Database created successfully`,\n        duration: 2000,\n        color: 'success',\n        position: 'bottom',\n      });\n      ionToast.present();\n    }\n    return doc;\n  }\n\n  private _getAuthorizedDidID() {\n    if (!this._did.did$.value) throw new Error('DIDSession not initialized');\n    // get existing parent DID id or current DID id\n    const id = this._did.did$.value.hasParent\n      ? this._did.did$.value.parent\n      : this._did.did$.value.id;\n    return id;\n  }\n\n  // /**\n  //  * Private method that authorize Ceramic instance by use the DIDSession DID.\n  //  * This method is called before each Ceramic call to ensure that \n  //  * the DIDSession is initialized and the Ceramic instance is authorized to use it.\n  //  */\n  // private _authorizeCeramicWithDID() {\n  //   // set ceramic DID to the one from the DIDSession\n  //   if (!this._didService.did$.value) throw new Error('DIDSession not initialized');\n  //   this._ceramic.did = this._didService.did$.value;\n  //   return this._ceramic?.did?.id;\n  // }\n\n}\n\n\nexport class LocalDatastoreServcie implements IDatastoreService<Storage> {\n  get datastore() {\n    return window.localStorage;\n  }\n\n  async getData<T>(family: string, tags: string[], data?: T): Promise<T> {\n    // check if existing data\n    const key = `${family}:${tags.join(':')}`;\n    const existKey = this.datastore.getItem(key);\n    if (!existKey && data) {\n      const newValue = JSON.stringify(data);\n      this.datastore.setItem(key, newValue);\n    } \n    const value = this.datastore.getItem(key);\n    if (value) {\n      return JSON.parse(value);\n    } else {\n      throw new Error(`No data found for key: ${key}`);\n    }\n  }\n\n  async loadData(streamId: string): Promise<{_id: string;}>{\n    throw new Error('Method not implemented.');\n  }\n\n  async saveData<T>(\n    data: T,\n    family: string,\n    tags: string[]\n  ): Promise<\n    {\n      _id: string;\n    } & T\n  >{\n    const key = `${family}:${tags.join(':')}`;\n    const newValue = JSON.stringify(data);\n    this.datastore.setItem(key, newValue);\n    return {\n      _id: Date.now().toString(),\n      ...data\n    };\n  }\n}","import { Inject, Injectable } from \"@angular/core\";\nimport { IEncryptionService, IIdentityService } from \"@hexa/interfaces\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { JWE } from 'did-jwt';\n\n// Doc: https://blog.ceramic.network/how-to-store-signed-and-encrypted-data-on-ipfs/   \n\n@Injectable()\nexport class DIDEncryptionService implements IEncryptionService {\n\n  constructor(\n    @Inject(getInjectionToken(TOKENS_NAME.APP_DID_SERVICE)) private readonly _identityService: IIdentityService\n  ){}\n\n  async encryptData(data: string, authorizedDID: string[] = []) {\n    const unit8Data = new TextEncoder().encode(data);\n    const did = this._identityService.did$.value;\n    const didID = this._getAuthorizedDidID();\n    if (!did) throw new Error('{DIDEncryptionService}: DIDSession not initialized');\n    if (!did.createJWE) throw new Error('{DIDEncryptionService}: createJWE not implemented');\n    try {      \n      const jwe = await did.createJWE(\n        unit8Data, \n        // liste of authorized DID ID to decrypt\n        [\n          didID,\n          ...authorizedDID\n        ]\n      ); \n      return jwe;\n    } catch (error: any) {\n      throw new Error(`[ERROR] {DIDEncryptionService}: ${error?.message}`);\n    }\n  }\n\n  async decryptData(jwe: JWE) {\n    const did = this._identityService.did$.value;\n    console.log(`[INFO] {DIDEncryptionService} `, did, jwe);\n    const decryptedJWEunit8Data = await did.decryptJWE(jwe);\n    const decryptedJWE = new TextDecoder().decode(decryptedJWEunit8Data);\n    return decryptedJWE;\n  }\n\n  private _getAuthorizedDidID() {\n    if (!this._identityService.did$.value) throw new Error('DIDSession not initialized');\n    // get existing parent DID id or current DID id\n    const id = this._identityService.did$.value.hasParent\n      ? this._identityService.did$.value.parent\n      : this._identityService.did$.value.id;\n    return id;\n  }\n}\n\n@Injectable()\nexport class LocalEncryptionService implements IEncryptionService {\n  async decryptData(data: any){\n    console.log(`[LocalEncryptionStrategy] decryptData: ${data}`);\n    return data;\n  }\n  encryptData(data: any, authorizedDID: any) {\n    console.log(`[LocalEncryptionStrategy] encryptData: ${data}, ${authorizedDID}`);\n    return data;\n  }\n}","import { Injectable } from \"@angular/core\";\nimport { DID } from '@hexa/dids';\nimport { ethers} from 'ethers';\nimport { BehaviorSubject } from \"rxjs\";\nimport { IIdentityService } from \"@hexa/interfaces\";\nimport { EthereumAuthProvider as ThreeIdAuthProvider, ThreeIdConnect } from '@3id/connect';\nimport { EthereumAuthProvider as EthSelfIDAuthProvider, SelfID } from '@self.id/web';\n\n\n@Injectable()\nexport class DIDService implements IIdentityService {\n  \n  public readonly did$ = new BehaviorSubject<DID>(null as any);\n  private readonly _threeID = new ThreeIdConnect('testnet-clay');\n  private _selfId$ = new BehaviorSubject<SelfID>(null as any);\n\n  async connectWallet(\n    provider: ethers.providers.ExternalProvider = (window as any).ethereum, \n    account: string\n  ) {\n    try {\n      await this._auth(provider, account);\n      return true;\n    } catch (error: any) {\n      this.did$.next(null as any);\n      throw new Error(error.message);\n    }\n  }\n\n  private async _auth(provider: ethers.providers.ExternalProvider = (window as any).ethereum, account: string) {\n    if (!provider) {\n      throw new Error('No injected Ethereum provider found');\n    }\n    await this._authenticateWithEthereum(provider, account);\n  }\n\n  private async _authenticateWithEthereum(\n    ethereumProvider: ethers.providers.ExternalProvider,\n    account: string\n  ) {\n    await this._connectWith3ID(ethereumProvider, account);\n    // await this._saveLatestConnectionDateTime();\n  }\n\n  private async _connectWith3ID(\n    ethereumProvider: ethers.providers.ExternalProvider,\n    account: string\n  ) {\n    // Create an EthereumAuthProvider using the Ethereum provider and requested account\n    const authProvider = new ThreeIdAuthProvider(ethereumProvider, account);\n    // Connect the created EthereumAuthProvider to the 3ID Connect instance so it can be used to\n    // generate the authentication secret\n    await this._threeID.connect(authProvider);\n    const did = new DID({\n      // Get the DID provider from the 3ID Connect instance\n      provider: this._threeID.getDidProvider(),\n\n      // The DID resolver is used to resolve the DID document from the 3ID Connect instance \n      // and the public keys from the Key DID Resolver\n      // resolver: {\n      //   ...get3IDResolver(this._threeID),\n      // }\n    });\n    this.did$.next(did);\n  }\n\n  private async _authWithSelfID(\n    ethereumProvider: ethers.providers.ExternalProvider,\n    account: string\n  ) {\n    const selfID = await SelfID.authenticate({\n      authProvider: new EthSelfIDAuthProvider(ethereumProvider, account),\n      ceramic: 'testnet-clay',\n      // Make sure the `ceramic` and `connectNetwork` parameter connect to the same network\n      connectNetwork: 'testnet-clay',\n      threeidConnect: true\n    });\n    const did = selfID.did;\n    this._selfId$.next(selfID);\n    this.did$.next(did);\n  }\n\n  private async _saveLatestConnectionDateTime() {\n    // const selfId = this._selfId$.value;\n    // await selfId?.set('basicProfile', {\n    //   latestConnectionISODatetime: new Date().toISOString(),\n    // });\n  }\n}\n\n\n@Injectable()\nexport class LocalDIDServcie implements IIdentityService {\n  public readonly did$ = new BehaviorSubject<DID>(null as any);\n  public async connectWallet() {\n    this.did$.next({\n      id: 'did:3:0xlocal',\n      authenticated: true,\n    } as DID);\n    return true;\n  }\n}","import { ErrorHandler, Inject, Injectable, NgZone } from '@angular/core';\nimport { ILoadingService } from '@hexa/interfaces';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\nimport { AlertController, LoadingController } from '@ionic/angular';\n\n@Injectable()\nexport class GlobalErrorHandlerService implements ErrorHandler {\n\n  constructor(\n    private readonly _alertService: AlertController,\n    private _zone: NgZone,\n    private readonly _loadingCtrl: LoadingController,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_LOADER_SERVICE)) private readonly _loaderService: ILoadingService,\n  ) { }\n\n  async handleError(error: any) {\n    let message = error.message || error;\n    // get message error from Unkown Promise Error\n    if (message.indexOf('Uncaught (in promise):') !== -1) {\n      message = message.split('Uncaught (in promise):')[1].trim();\n    }\n    console.error('[ERROR] GlobalErrorHandler: ', error.message);\n    // use `NgZone.run`, too update loader state even if the error is thrown outside the ngZone\n    this._zone.run(async () =>  {\n      this._loaderService.setStatus(false);\n      // close existing loader UI ctrl \n      const existingLoader = await this._loadingCtrl.getTop();\n      if (existingLoader) {\n        await existingLoader.dismiss();\n      }\n      // close existing alert\n      const existingAlert = await this._alertService.getTop();\n      if (existingAlert) {\n        await existingAlert.dismiss();\n      }\n      // show alert\n      const appAlert = await this._alertService.create({\n        header: 'Error',\n        message,\n        buttons: ['OK'],\n        cssClass: 'app-alert danger',\n      });\n      await appAlert.present();\n    });\n  }\n}","export * from './datastore.service';\nexport * from './did.service';\nexport * from './did-encryption.service';\nexport * from './global-error-handler.service';\nexport * from './ipfs.service';\nexport * from './xmtp.service';\nexport * from './notification.service';\nexport * from './pinata.service';\n// export * from './nacl.service';\nexport * from './web3-auth.service';","import { Injectable } from '@angular/core';\nimport { create, IPFS  } from 'ipfs-core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CID } from 'multiformats/cid';\nimport { DagAPI, IIPFSService, IPiningService } from '@hexa/interfaces';\n\n@Injectable()\nexport class IPFSService implements IIPFSService {\n  private _ipfsNode!: IPFS;\n  private readonly dag$: BehaviorSubject<DagAPI> = new BehaviorSubject<DagAPI>(null as any);\n\n  async disconect() {\n    if (this._ipfsNode.dag) {\n      await this._ipfsNode.stop();\n    }\n  }\n\n  async add(file: File | Blob, s?: IPiningService) {\n    if (!this._ipfsNode) {\n      this._ipfsNode = await create({\n        config: {},\n      });\n    }\n    const nodeIsOnline = this._ipfsNode.isOnline();\n    if (!nodeIsOnline) {\n      throw new Error('IPFS node is not online');\n    }\n    const { cid } = await this._ipfsNode.add(file, {\n      timeout: 10000,\n      preload: false,\n      progress: (prog: any) => console.log(`received: ${prog}`),\n    });\n    if (s) {\n      await s.pin(cid.toString());\n    }\n    return {\n      cid: cid.toString(),\n    };\n  }\n\n  async pin(s: IPiningService, cid: string) {\n    await s.pin(cid);\n  }\n\n  async unpin(s: IPiningService ,cid: string) {\n    await s.unpin(cid);\n  }\n\n  async getFromCID(cid: string, type?: string): Promise<File> {\n    if (!this._ipfsNode) {\n      this._ipfsNode = await create();\n    }\n    const nodeIsOnline = this._ipfsNode.isOnline();\n    if (!nodeIsOnline) {\n      throw new Error('IPFS node is not online');\n    }\n    const asyncUint8Array = this._ipfsNode.cat(cid, {\n      timeout: 10000,\n      preload: false,\n    });\n    const blobsPart = [];\n    for await (const chunk of asyncUint8Array) {\n      blobsPart.push(chunk);\n    }\n    const file = new File(blobsPart, cid, { type });\n    return file;\n  }\n\n  async getDag(): Promise<DagAPI> {\n    if (!this._ipfsNode) {\n      this._ipfsNode = await create({\n        config: {},\n      });\n    }\n    const nodeIsOnline = this._ipfsNode.isOnline();\n    if (!nodeIsOnline) {\n      throw new Error('IPFS node is not online');\n    }\n    if (!this.dag$.value) {\n      this.dag$.next(this._ipfsNode.dag);\n    }\n    return this.dag$.value;\n  }\n\n  cidFromString(id: string) {\n    return CID.parse(id);\n  }\n\n}\n\n\n@Injectable()\nexport class LocalIPFSService implements IIPFSService {\n  async disconect(){\n    console.log('disconect');\n  }\n\n  async add(file: File | Blob): Promise<{\n    cid: string;\n  }>{\n    // get local drive database from localStorage\n    const existingKey = localStorage.getItem('local:hexa:drive:ipfs');\n    let existingData: any = {};\n    if (existingKey) {\n      existingData = JSON.parse(existingKey);\n    }\n    // store file as base64 to local storage\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    const cid: string = await new Promise((resolve, reject) => {\n      reader.onload = () => {\n        const name = (file as any)?.name||'filename';\n        const base64 = reader.result?.toString();\n        existingData[name] = base64;\n        localStorage.setItem('local:hexa:drive:ipfs', JSON.stringify(existingData));\n        resolve(name)\n      };\n      reader.onerror = (error) => {\n        console.log('Error: ', error);\n        reject(error as any);\n      };\n    });\n    return {\n      cid\n    }\n  }\n\n  async getFromCID(cid: string, type?: string): Promise<File>{\n    const existingKey = localStorage.getItem('local:hexa:drive:ipfs');\n    let existingData: any = {};\n    if (existingKey) {\n      existingData = JSON.parse(existingKey);\n    }\n    const base64 = existingData[cid];\n    // create file from base64\n    const response = await fetch(base64);\n    const blob = await response.blob();\n    const file = new File([blob], cid, { type });\n    return file;\n  }\n\n  async getDag(): Promise<any> {\n    return {\n      put: async (node: [key: string, value: any]) => {\n        // get local drive database from localStorage\n        const existingKey = localStorage.getItem('local:hexa:drive:ipfs');\n        let existingData: any = {};\n        if (existingKey) {\n          existingData = JSON.parse(existingKey);\n        }\n        const cid = 'cid-' + Date.now();\n        existingData[cid] = JSON.stringify(node);\n        localStorage.setItem('local:hexa:drive:ipfs', JSON.stringify(existingData));\n        return {\n          cid: {\n            toString: () => cid\n          }\n        }\n      },\n      get: async (cid: any) => {\n        // get local drive database from localStorage\n        const existingKey = localStorage.getItem('local:hexa:drive:ipfs');\n        let existingData: any = {};\n        if (existingKey) {\n          existingData = JSON.parse(existingKey);\n        }\n        const value = existingData[cid] as string;\n        return {\n          value \n        }\n      },\n    };\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { IAuthService, IMessagingService, INotificationService } from '@hexa/interfaces';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\nimport { LoadingController } from '@ionic/angular';\nimport { debounceTime, map, tap } from 'rxjs';\n\n@Injectable()\nexport class NotificationService implements INotificationService {\n  public readonly notifications$ = this._messagingService.messages$.pipe(\n    // formating messages to be displayed\n    map((messages) =>\n      messages\n        .map((message) => message.messagesInConversation)\n        .flat()\n        // filter only application messages\n        .filter((m) => m.content.startsWith('hexa'))\n        // parse message\n        .map((m) => this._parseMessage(m.content))\n\n    ),\n    debounceTime(1000),\n    // update the user profil `latestNotifedISODatetime` field\n    // each time a new notification is received from XMTP\n    tap((messages) =>\n      messages.length > 0\n        ? this._authService\n          .updateProfilData({\n              latestNotifedISODatetime: new Date().toISOString(),\n            })\n            .then(() =>\n              console.log(\n                '[INFO] {NOTIFService} User profil `latestNotifedISODatetime` updated'\n              )\n            )\n        : null\n    ),\n    // update user `sharedDocument` list data\n    tap((messages) => {\n      // TODO: update user `sharedDocument` list data using `CeramicService`\n    }),\n    // clear `messages` BehaviorSubject after XXXXms\n    // to avoid displaying the same messages twice\n    tap((messages) => {\n      if (messages.length > 0) {\n        // clear messages\n        const t = setTimeout(() => {\n          this._messagingService.messages$.next([]);\n          clearTimeout(t);\n        }, 2500);\n      }\n    })\n  );\n  public readonly isConnected$ = this._messagingService.isConnected$;\n\n  constructor(\n    private readonly _loaderCtrl: LoadingController,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_MESSAGING_SERVICE)) private readonly _messagingService: IMessagingService,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE)) private readonly _authService: IAuthService\n  ) {}\n\n  async connect() {\n    const ionLoading = await this._loaderCtrl.create({\n      message: `Waiting signature from your wallet to enable notifications...`,\n    });\n    await ionLoading.present();\n    await this._messagingService.connect().catch((error) => {\n      ionLoading.dismiss();\n      throw error;\n    });\n    await ionLoading.dismiss();\n    await this._messagingService.loadDatas();\n  }\n\n  async disconnect() {\n    await this._messagingService.disconnect();\n  }\n\n  async sendNotification(\n    metaData: any,\n    senderAddress: string,\n    destinationAddress: string,\n    filterKey: string\n  ) {\n    // formating message\n    const messageData: any = {\n      metaData,\n      senderAddress,\n      createdISODateTime: new Date().toISOString(),\n    };\n    // encoding message\n    const base64Data = `hexa/${filterKey}:${btoa(\n      JSON.stringify(messageData)\n    )}`;\n    // send message\n    await this._messagingService.sendMessage({\n      destinationAddress,\n      message: base64Data,\n    });\n    console.log('[INFO] {NotificationService} message sent: ', base64Data);\n  }\n\n  private _parseMessage(value: string) {\n    const base64Message = value.replace('hexa/', '');\n    const [prefixKey, ...b64messageArray] = base64Message.split(':');\n    const jsonMessage = atob(b64messageArray.toString());\n    let message;\n    let dataMessage: { metaData?: any; senderAddress?: string };\n    try {\n      dataMessage = JSON.parse(jsonMessage);\n    } catch (error) {\n      message = 'Error while parsing message';\n      console.log('[ERROR] {NotificationService} _parseMessage: ', error);\n      return message;\n    }\n    switch(true) {\n      case prefixKey === 'drive':\n        message = `You have a new shared document from ${dataMessage.senderAddress}`;\n        break;\n      case prefixKey === 'calendar':\n        message = `You have a new shared event from ${dataMessage.senderAddress}`;\n        break;\n      case prefixKey === 'note':\n        message = `You have a new shared note from ${dataMessage.senderAddress}`;\n        break;\n      default:\n        message = 'You have a new notification';\n    }\n    return message;\n  }\n}","import { inject, Injectable } from '@angular/core';\nimport {\n  IAuthService,\n  IPiningService,\n  IPiningServiceConfig,\n} from '@hexa/interfaces';\nimport { firstValueFrom } from 'rxjs';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\n\n@Injectable()\nexport class PinataService implements IPiningService {\n  private readonly defaultConfig = inject<IPiningServiceConfig>(\n    getInjectionToken(TOKENS_NAME.APP_PINNING_SERVICE_DEFAULT_CONFIG)\n  );\n  private readonly authService = inject<IAuthService>(\n    getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE)\n  );\n\n  async pin(cid: string) {\n    const profile = await firstValueFrom(this.authService.profile$);\n    const url = 'https://api.pinata.cloud/pinning/pinByHash';\n    const token = profile?.ipfsConfig?.token || this.defaultConfig.token;\n    if (!url || !token) {\n      throw new Error('Pinata IPFS pinning service is not configured');\n    }\n    const body = JSON.stringify({\n      hashToPin: cid,\n    });\n    const config: RequestInit = {\n      method: 'POST',\n      body,\n      headers: new Headers({\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      }),\n    };\n    await fetch(url, config)\n      .then((res) => res.json())\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  async unpin(cid: string) {\n    const profile = await firstValueFrom(this.authService.profile$);\n    const url = `https://api.pinata.cloud/pinning/unpin/${cid}`;\n    const token = profile?.ipfsConfig?.token || this.defaultConfig.token;\n    if (!url || !token) {\n      throw new Error('Pinata IPFS pinning service is not configured');\n    }\n    const config: RequestInit = {\n      method: 'DELETE',\n      headers: new Headers({\n        Authorization: `Bearer ${token}`,\n      }),\n    };\n    await fetch(url, config).catch((err) => {\n      throw err;\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { IPromptStrategyService } from \"@hexa/interfaces\";\nimport { AlertController } from \"@ionic/angular\";\n\n@Injectable()\nexport class PromptStrategyService implements IPromptStrategyService  {\n  \n  async askSetupService(serviceName?: string): Promise<{token: string, serviceName: string}|undefined> {\n    const valueExist =  Boolean(serviceName);\n    console.log('valueExist', valueExist, serviceName);\n    \n    const isNotDefaultService =  valueExist && serviceName && !serviceName.includes('default');\n    if (isNotDefaultService) {\n      return;\n    }\n    const userWantSetup = await this._promptInfos().then(r => r === 'ok');\n    if (!userWantSetup) {\n      return;\n    }\n    const {role, data: {values: selectedService} = {}} = await this._promptSelectService();\n    if (!selectedService || role !== 'ok') {\n      return;\n    }\n    const {data: {values: apiConfig}, role: promptAPIKeys} = await this._promptAPIKeys(selectedService);\n    if (promptAPIKeys !== 'ok') {\n      return;\n    }\n    return  {...apiConfig, serviceName: selectedService};\n  }\n\n  private async _promptInfos() {\n    const ctrl = new AlertController();\n    const alertUI = await ctrl.create({\n      header: `Configure pinning service`,\n      subHeader: `This app is using IPFS to store your data and delegate to external service to pin your data on the IPFS network.`,\n      message: 'Do you want to configure the pinning service with your own account? If not, the default service will be used and your data will be stored on the IPFS network and pinned by the default service but this will not guarantee the long term availability of your data.',\n      buttons: [\n        { text: 'No', role: 'cancel' },\n        { text: 'Yes', role: 'ok' }\n      ]\n    });\n    await alertUI.present();\n    const { role } = await alertUI.onDidDismiss();\n    return role;\n  }\n\n  private async _promptSelectService() {\n    const ctrl = new AlertController();\n    const alertUI = await ctrl.create({\n      header: `Select pinning service`,\n      message: `You can select the pinning service you want to use to pin your data on the IPFS network. If you don't know what to choose, just \"Pinata\" the default service and go create an account on <a href=\"https://pinata.cloud\" target=\"_blank\">https://pinata.cloud</a>. to get your own API key.`,\n      inputs: [\n        {\n          name: 'pinata',\n          type: 'radio',\n          label: 'Pinata',\n          value: 'pinata',\n          checked: true,\n        },\n        {\n          name: 'web3.storage',\n          type: 'radio',\n          label: 'Web3.Storage',\n          value: 'web3.storage',\n        },\n      ],\n      mode: 'ios',\n      buttons: [\n        { text: 'Cancel', role: 'cancel' },\n        { text: 'Ok', role: 'ok' }\n      ]\n    });\n    await alertUI.present();\n    return await alertUI.onDidDismiss();\n  }\n\n  private async _promptAPIKeys(serviceName: 'pinata' | 'web3.storage') {\n    const availableService = [\n      {name:'pinata', url: 'https://pinata.cloud'}, \n      {name: 'web3.storage', url: 'https://web3.storage/'}\n    ];\n    const urlAPI = availableService.find(s => s.name === serviceName)?.url;\n    const ctrl = new AlertController();\n    const alertUI = await ctrl.create({\n      header: `Configure pinning service`,\n      subHeader: `Please enter your API keys to configure the pinning service.`,\n      message: `You can get it by creating an free account on <a href=\"${urlAPI}\" target=\"_blank\">${urlAPI}</a>.`,\n      inputs: [\n        { \n          name: 'token',\n          type: 'text',\n          placeholder: 'API Token',\n        },\n      ],\n      buttons: [\n        { text: 'Cancel', role: 'cancel' },\n        { text: 'Ok', role: 'ok' }\n      ]\n    });\n    await alertUI.present();\n    return await alertUI.onDidDismiss();\n  }\n} ","import { Inject, Injectable } from '@angular/core';\nimport { ethers } from 'ethers';\nimport { Magic } from 'magic-sdk';\nimport { WebAuthnExtension } from '@magic-ext/webauthn';\nimport { recoverPersonalSignature } from \"@metamask/eth-sig-util\";\nimport { BehaviorSubject} from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  IAuthService,\n  IDatastoreService,\n  IIdentityService,\n  IAuthUser,\n  IAuthGuardService,\n  IMessagingService,\n} from '@hexa/interfaces';\nimport { CeramicClient } from '@ceramicnetwork/http-client';\nimport { getResolver as get3IDResolver } from '@ceramicnetwork/3id-did-resolver';\nimport { DIDDataStore } from '@glazed/did-datastore';\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\nimport { DID } from '@hexa/dids';\n\nconst DB_NAME = 'hexa';\nconst MAINNET_RPC_URL = 'https://rpc.ankr.com/eth';\nconst MATIC_RPC_URL = 'https://matic-mainnet.chainstacklabs.com';\n\n@Injectable()\nexport class Web3AuthService implements IAuthService, IAuthGuardService {\n  public readonly ethereumProvider$: BehaviorSubject<ethers.providers.Web3Provider> =\n    new BehaviorSubject(null as any);\n  public readonly signer$: BehaviorSubject<ethers.providers.JsonRpcSigner> =\n    new BehaviorSubject(null as any);\n  public readonly account$: BehaviorSubject<string> = new BehaviorSubject(\n    null as any\n  );\n  public readonly profile$: BehaviorSubject<IAuthUser> = new BehaviorSubject(\n    null as any\n  );\n  public readonly magic = this._magicWeb3();\n  public readonly did$ = this._did.did$;\n  public isWaiting$ = new BehaviorSubject(false); // used by app guard to prevent navigation while waiting for wallet connection\n\n  constructor(\n    private readonly _router: Router,\n    private readonly _route: ActivatedRoute,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_MESSAGING_SERVICE))\n    private readonly _msgService: IMessagingService,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_DID_SERVICE))\n    private readonly _did: IIdentityService,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_CERAMIC_SERVICE))\n    private readonly _ceramic: CeramicClient,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_DATASTORE_SERVICE))\n    private readonly _datastore: IDatastoreService<DIDDataStore>,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_AUTH_APIKEY)) \n    private readonly _authApiKey: string,\n  ) {\n  }\n\n  async connect(accountToConnect?: string) {\n    this.isWaiting$.next(true);\n    // await this._connectWithOnboard();\n    const {account, provider} = await this._connectWithMagic(accountToConnect);\n    console.log('[INFO] {Web3AuthService} connect() - Connected: ', {account, provider});\n    const ethersProvider = new ethers.providers.Web3Provider(\n      provider as any,\n      'any'\n    )\n    // connect with metamask\n    const ethAccounts = await ethersProvider.send(\"eth_requestAccounts\", []);\n    if (ethAccounts[0] !== account) {\n      throw new Error(`[ERROR] {Web3AuthService} connect() - Account and ethers account are not the same.`);\n    }\n    // verify signature\n    const isOwner = await this.signAndVerify(ethersProvider.getSigner(), account);\n    if (!isOwner) {\n      this.isWaiting$.next(false);\n      await this.disconnect();\n      throw new Error('User is not owner of this wallet. Unable to verify signature.');\n    }\n    await this._connectDID(provider as any, account);\n    console.log('[INFO] Connected DID with Ethers provider:', {ethersProvider});\n    // update profile or set default profile if not exist\n    await this.updateProfilData({\n      latestConnectionISODatetime: new Date().toISOString(),\n    });\n    console.log('[INFO] Updated user profil data.');\n    // update state\n    this.ethereumProvider$.next(ethersProvider);\n    this.signer$.next(ethersProvider.getSigner());\n    this.account$.next(account);\n    this.isWaiting$.next(false);\n    // try listen events wallet\n    ethersProvider.on('accountsChanged', async (accounts: string[]) => {\n      console.log('[INFO] Accounts changed', accounts);\n      await this.disconnect();\n    });\n    ethersProvider.on(\"network\", async (newNetwork, oldNetwork) => {\n      // When a Provider makes its initial connection, it emits a \"network\"\n      // event with a null oldNetwork along with the newNetwork. So, if the\n      // oldNetwork exists, it represents a changing network\n      if (oldNetwork) {\n        await this.disconnect();\n      }\n    });\n    await this._connectOthersServices();\n    return Boolean(account)\n  }\n\n  async connectWallet(address: string): Promise<boolean> {\n    return this.connect(address);\n  }\n\n  async disconnect() {\n    console.log('[INFO] Disconnecting wallet');\n    await this.magic.wallet.disconnect();\n    window.localStorage.removeItem('connectedWallets');\n    this.signer$.next(null as any);\n    this.account$.next(null as any);\n    this.profile$.next(null as any);\n    this._did.did$.next(null as any);\n    this.isWaiting$.next(false);\n    // this.unsubscribe();\n    this._redirectToRoot();\n  }\n\n  async getAccountDID(\n    address: string,\n    chainParam = 'eip155:1'\n  ): Promise<string> {\n    const link = await Caip10Link.fromAccount(\n      this._ceramic,\n      `${address}@${chainParam}`\n    );\n    if (link.did == null) {\n      throw new Error(`No DID found for ${address}`);\n    }\n    return link.did;\n  }\n\n  async signAndVerify(signer: ethers.providers.JsonRpcSigner, account: string) {\n    const message = 'hexa authentication with wallet signature.';\n    const signedMessage = await signer.signMessage(message).catch(async (error) => {\n      await this.disconnect();\n      throw error;\n    });\n    // recover the public address of the signer to verify\n    const recoveredAddress = recoverPersonalSignature({\n      data: message,\n      signature: signedMessage,\n    });\n    return recoveredAddress.toLocaleLowerCase() === account.toLocaleLowerCase();\n  };\n\n  private async _connectDID(\n    provider: ethers.providers.ExternalProvider | undefined,\n    accountAddress: string\n  ) {\n    // connect DID service\n    const isDIDConnected = await this._did\n      .connectWallet(provider, accountAddress)\n      .then(() => true)\n      .catch((error) => error as Error);\n    // set resolver\n    console.log('[INFO] Set resolver');\n    const resolvers = { ...get3IDResolver(this._ceramic) };\n    const did = this._did.did$.value;\n    did.setResolver(resolvers as any);\n    console.log('[INFO] Authenticate with DID provider');\n    // Authenticate the DID using the 3ID provider from 3ID Connect, this will trigger the\n    // authentication flow using 3ID Connect and the Ethereum provider\n    const isAuth = await did.authenticate();\n    this._ceramic.did = did;\n    console.log('[INFO] DID ', isAuth);\n    // throw error if DID connection failed\n    if (!isDIDConnected || isDIDConnected instanceof Error) {\n      await this.disconnect();\n      this.isWaiting$.next(false);\n      throw Error(\n        isDIDConnected instanceof Error\n          ? isDIDConnected.message || 'Could not connect wallet to DID service.'\n          : 'Could not connect wallet to DID service.'\n      );\n    }\n  }\n\n  private async _connectWithMagic(accountToConnect?: string) {\n    const provider = this.magic.rpcProvider;  \n    if (accountToConnect) {\n      return {\n        account: accountToConnect, \n        provider\n      }\n    }\n    const accounts = await this.magic.wallet.connectWithUI();\n    const account = accounts[0];\n    // set local storage\n    window.localStorage.setItem('connectedWallets', JSON.stringify(accounts));\n    return {\n      account, provider\n    }\n  }\n\n  private _magicWeb3() {\n    const customNodeOptions = this._getRPCNodeOptions();\n    console.log(`[INFO] {Web3AuthService} _magicWeb3() - Create MagicWeb3 instance with node params: `, customNodeOptions);\n    const magic = new Magic(this._authApiKey, {\n      network: customNodeOptions, // 'mainnet', // or your own custom node url in the format of { rpcUrl: string chainId: number }\n      extensions: [new WebAuthnExtension()],\n    });\n    return magic;\n  }\n\n  private _getRPCNodeOptions() {\n    const RPC_NODE_OPTIONS = [\n      {\n        rpcUrl: MAINNET_RPC_URL, // your ethereum, polygon, or optimism mainnet/testnet rpc URL\n        chainId: 1 // corresponding chainId for your rpc url\n      },\n      {\n        rpcUrl: 'https://eth-goerli.public.blastapi.io', // your ethereum, polygon, or optimism mainnet/testnet rpc URL\n        chainId: 5 // corresponding chainId for your rpc url\n      },\n      {\n        rpcUrl: 'https://polygon-rpc.com', // or https://matic-mumbai.chainstacklabs.com for testnet\n        chainId: 137 // or 80001 for polygon testnet\n      },\n      {\n        rpcUrl: 'https://matic-mumbai.chainstacklabs.com',\n        chainId: 80001\n      }\n    ];\n    const defaultChainId = 1;\n    const {chainId = defaultChainId} = (window as any)?.ethereum||{};\n    const chainIdAsDecimal = Number(BigInt(chainId).toString());\n    const nodeOps =  RPC_NODE_OPTIONS.find(n => n.chainId === chainIdAsDecimal);\n    if (!nodeOps) {\n      throw new Error('RPC Node config fail. Incorect params, ');\n    }\n    return nodeOps;\n  }\n\n  /**\n   * Method that check the current route and redirect to root if the route is not the root\n   */\n  private async _redirectToRoot() {\n    if (this._router.url !== '/') {\n      await this._router.navigateByUrl('/');\n    }\n  }\n\n  private async _connectOthersServices() {\n    const { latestConnectionISODatetime, latestNotifedISODatetime } =\n      await this.getProfilData();\n    const mostRecentDate = [\n      latestConnectionISODatetime,\n      latestNotifedISODatetime,\n    ]\n      .filter(Boolean)\n      .sort(\n        (a, b) =>\n          (b ? new Date(b).getTime() : new Date().getTime()) -\n          (a ? new Date(a).getTime() : new Date().getTime())\n      )\n      .shift();\n    // build options for xmtp messages fetching\n    // this will only return messages that are newer than the `mostRecentDate` constante\n    const opts = mostRecentDate\n      ? {\n          startTime: new Date(mostRecentDate),\n          endTime: new Date(),\n        }\n      : undefined;\n    const provider = this.ethereumProvider$.value;\n    // this will only init the service and not connect the wallet\n    if (this._msgService.init) {\n      await this._msgService.init(provider, {\n        ...opts,\n        // startTime: new Date('2023-01-01'),\n      });\n    }\n  }\n\n  async getProfilData(): Promise<IAuthUser> {\n    const profil = await this._datastore.getData(\n      DB_NAME, // database name\n      ['basicProfile'], // datbase collections\n      // default values if database is empty\n      {\n        latestConnectionISODatetime: new Date('2000-01-01').toISOString(),\n        latestNotifedISODatetime: new Date('2000-01-01').toISOString(),\n        creationISODatetime: new Date().toISOString(),\n      }\n    );\n    this.profile$.next(profil);\n    return profil;\n  }\n\n  async updateProfilData(data: Partial<IAuthUser>): Promise<IAuthUser> {\n    const profil = this.profile$.value || (await this.getProfilData());\n    const result = await this._datastore.saveData(\n      {\n        ...profil,\n        ...data,\n      },\n      DB_NAME, // database name\n      ['basicProfile'] // datbase collections,\n    );\n    this.profile$.next(result);\n    return result;\n  }\n}\n\n\n@Injectable()\nexport class LocalAuthService implements IAuthService, IAuthGuardService {\n  ethereumProvider$ = new BehaviorSubject<any>(null);\n  signer$ = new BehaviorSubject<any>(null);\n  account$ = new BehaviorSubject<any>(null as any);\n  profile$ = new BehaviorSubject<IAuthUser>(null as any);\n  did$ = this._did.did$;\n  isWaiting$ = new BehaviorSubject(false)\n\n  constructor(\n    private readonly _router: Router,\n    @Inject(getInjectionToken(TOKENS_NAME.APP_DID_SERVICE))\n    private readonly _did: IIdentityService,  \n  ) {\n    console.log('[INFO]: LocalAuthService');\n  }\n\n  private _setLocalUser() {\n    this.account$.next('0xlocal');\n    this.profile$.next({\n      latestConnectionISODatetime: new Date().toISOString(),\n      latestNotifedISODatetime: new Date().toISOString(),\n      creationISODatetime: new Date().toISOString(),\n    });\n  }\n\n  async connectWallet(address: string) {\n    return this.connect(address);\n  }\n\n  async connect(accountToConnect?: string): Promise<boolean> {\n    await this._did.connectWallet(undefined, accountToConnect||'');\n    this._setLocalUser();\n    if (this.account$.value) {\n      window.localStorage.setItem('connectedWallets', JSON.stringify([this.account$.value]));\n    }\n    return true;\n  }\n  \n  async disconnect(): Promise<void> {\n    // reset local user\n    this.account$.next(null as any);\n    this.profile$.next(null as any);\n    this.did$.next(null as any);\n    // reset local storage\n    window.localStorage.removeItem('connectedWallets');\n    this._redirectToRoot();\n    console.log('disconnect');    \n  }\n  async getAccountDID(address: string, chainParam?: string): Promise<string>{\n    return `did:3:${address}`;\n  }\n  async getProfilData(): Promise<IAuthUser> {\n    return this.account$.value;\n  }\n\n  async updateProfilData(data: Partial<IAuthUser>): Promise<IAuthUser> {\n    return {\n      latestConnectionISODatetime: new Date().toISOString(),\n      latestNotifedISODatetime: new Date().toISOString(),\n      creationISODatetime: new Date().toISOString(),\n      ...data\n    }\n  }\n\n    /**\n   * Method that check the current route and redirect to root if the route is not the root\n   */\n    private async _redirectToRoot() {\n      if (this._router.url !== '/') {\n        await this._router.navigateByUrl('/');\n      }\n    }\n}\n","import { inject, Injectable } from \"@angular/core\";\nimport { IPiningService, IAuthService } from \"@hexa/interfaces\";\nimport { getInjectionToken, TOKENS_NAME } from \"@hexa/token-injection\";\nimport { firstValueFrom } from \"rxjs\";\n\n@Injectable()\nexport class Web3storageService implements IPiningService {\n\n  private readonly _authService = inject<IAuthService>(getInjectionToken(TOKENS_NAME.APP_WEB3AUTH_SERVICE));\n\n  async pin(cid: string) {\n    const profile = this._authService.profile$.value;\n    const token = profile?.ipfsConfig?.token;\n    const url = 'https://api.web3.storage/pins';\n    if (!url || !token) {\n      throw new Error('IPFS pinning service is not configured');\n    }\n    const body = JSON.stringify({\n      \"cid\": cid\n    });\n    const config: RequestInit = {\n      method: 'POST',\n      body,\n      headers: new Headers({ \n        'Authorization': `Bearer ${token}`, \n        'Content-Type': 'application/json'\n      })\n    };\n    await fetch(url, config)\n      .then(res => res.json())\n      .catch(err => {\n        throw err;\n      });   \n  }\n\n  async unpin(cid: string) {\n    const profile = this._authService.profile$.value;\n    const token = profile?.ipfsConfig?.token;\n    const url = `https://api.web3.storage/pins'/${cid}`;\n    if (!url || !token) {\n      throw new Error('IPFS pinning service is not configured');\n    }\n    const config: RequestInit = {\n      method: 'DELETE',\n      headers: new Headers({ \n        'Authorization': `Bearer ${token}`, \n      })\n    };\n    await fetch(url, config)\n      .catch(err => {\n        throw err;\n      });\n  }\n\n}","import { inject, Injectable } from '@angular/core';\nimport {\n  Client,\n  Conversation,\n  DecodedMessage,\n  ListMessagesOptions,\n} from '@xmtp/xmtp-js';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { ethers } from 'ethers';\nimport { IBaseMessage, IMessagingService } from '@hexa/interfaces';\nimport { getInjectionToken, TOKENS_NAME } from '@hexa/token-injection';\n\nexport type XMTPConversation = Conversation;\nexport type XMTPConversationMessage = DecodedMessage;\n\nexport type IXMTPMessage = IBaseMessage<XMTPConversation, XMTPConversationMessage>;\n\n@Injectable()\nexport class XMTPService implements IMessagingService {\n  public readonly messages$: BehaviorSubject<IXMTPMessage[]> =\n    new BehaviorSubject<IXMTPMessage[]>([]);\n  private _web3Provider!: ethers.providers.Web3Provider;\n  private _ops: {\n    startTime: Date;\n    endTime: Date;\n} | undefined = undefined;\n  private readonly _conversations: BehaviorSubject<Conversation[]> =\n    new BehaviorSubject<Conversation[]>([]);\n  private readonly _xmtp: BehaviorSubject<Client> = new BehaviorSubject<Client>(\n    null as any\n  );\n  public readonly isConnected$ = this._xmtp.asObservable().pipe(\n    map((xmtp) => Boolean(xmtp))\n  );\n  private readonly _isProduction = inject<boolean>(getInjectionToken(TOKENS_NAME.APP_IS_PROD));\n\n  async init(web3Provider: ethers.providers.Web3Provider, ops: {\n    startTime: Date;\n    endTime: Date;\n} | undefined = undefined) {\n    this._web3Provider = web3Provider;\n    this._ops = ops;\n  }\n\n  async connect() {\n    if (!this._web3Provider) {\n      throw '{XMTPService} Web3Provider not found. Please unlock your Ethereum account, refresh the page and try again.';\n    }\n    // Create the client with your wallet.\n    // This will connect to the XMTP development network by default\n    const xmtp = await Client.create(this._web3Provider.getSigner(), {\n      env: this._isProduction ? 'production' : 'dev',\n    });\n    console.log('[INFO] {XMTPService} XMTP client created successfully');\n    this._xmtp.next(xmtp);\n  }\n\n  async loadDatas<T>(opts = <T>this._ops) {\n    const {conversationId = undefined, ...options} = opts || {} as any;\n    const {conversations = []} = await this._getConversations(conversationId);\n    this._conversations.next(conversations);\n    const messages = await this._getPreviousMessagesFromExistingConverstion(options);\n    this.messages$.next(messages);\n    this._listenAllUpcomingMessages();\n  }\n\n  async disconnect() {\n    const xmtp = this._xmtp.getValue();\n    if (!xmtp) {\n      return;\n    }\n    await xmtp.close();\n    this._xmtp.next(null as any);\n  }\n\n  async sendMessage(ops: {destinationAddress: string, message: string}) {\n    if (!this._web3Provider) {\n      throw '{XMTPService} Web3Provider not found. Please unlock your Ethereum account, refresh the page and try again.';\n    }\n    const {destinationAddress, message} = ops;\n    const {value: conversations = []} = this._conversations;\n    let conversation = conversations.find(\n      (c) => c.peerAddress === destinationAddress\n    );\n    if (!conversation) {\n      const {conversation: newConversation} = await this._startNewConversation(\n        destinationAddress\n      )\n      conversation = newConversation;\n    }\n    if (!conversation) {\n      throw 'Error while creating conversation';\n    }\n    // await conversation.send(message);\n  }\n\n  private async _startNewConversation(address: string, conversationId: string = 'hexa') {\n    if (!this._web3Provider) {\n      throw '{XMTPService} Web3Provider not found. Please unlock your Ethereum account, refresh the page and try again.';\n    }\n    let xmtp = this._xmtp.getValue();\n    if (!xmtp) {\n      await this.connect();\n      xmtp = this._xmtp.getValue();\n    }\n    const conversation = await xmtp.conversations\n      .newConversation(address, { conversationId, metadata: {} })\n      .catch((e) => {\n        throw e?.message || `Failed to start conversation with ${address}`;\n      });\n    // this._addListener(conversation);\n    this._conversations.next([...this._conversations.getValue(), conversation]);\n    return { conversation };\n  }\n\n  private async _getConversations(conversationId = 'hexa') {\n    if (!this._web3Provider) {\n      throw '{XMTPService} Web3Provider not found. Please unlock your Ethereum account, refresh the page and try again.';\n    }\n    let xmtp = this._xmtp.getValue();\n    if (!xmtp) {\n      await this.connect();\n      xmtp = this._xmtp.getValue();\n    }\n    const allConversations = await xmtp.conversations.list();\n    const conversations = allConversations.filter(\n      (convo) =>\n        convo.context?.conversationId &&\n        convo.context.conversationId.startsWith(conversationId)\n    )\n    return { conversations };\n  }\n\n  private async _getPreviousMessagesFromExistingConverstion(\n    opts?: ListMessagesOptions | undefined\n  ): Promise<IXMTPMessage[]> {\n    const xmtp = this._xmtp.value;\n    const messages = [];\n    const conversations = this._conversations.getValue();\n    console.log('[INFO] {XMTPService} Conversations', conversations, opts);\n    for (const conversation of conversations) {\n      // All parameters are optional and can be omitted\n      opts = opts\n        ? opts\n        : {\n            // Only show messages from last 24 hours\n            startTime: new Date(new Date().setDate(new Date().getDate() - 1)),\n            endTime: new Date(),\n          };\n      // get messages from conversation\n      const messagesInConversation = await conversation\n        .messages(opts)\n        .then((messages) => {\n          // filter out messages from self and return\n          return messages.filter(\n            (message) => message.senderAddress !== xmtp.address\n          );\n        });\n      // add conversation and messages to messages array\n      if (messagesInConversation.length > 0) {\n        messages.push({\n          conversation,\n          messagesInConversation,\n        });\n      }\n    };\n    console.log('[INFO] {XMTPService} Messages', messages);\n    return messages;\n  }\n\n  private async _listenAllUpcomingMessages() {\n    if (!this._web3Provider) {\n      throw '{XMTPService} Web3Provider not found. Please unlock your Ethereum account, refresh the page and try again.';\n    }\n    const xmtp = this._xmtp.value;\n    // Listen for new messages in existing conversations and new conversations\n    const streamAllMessages = await xmtp.conversations.streamAllMessages();\n    for await (const message of streamAllMessages) {\n      // filter out messages from self\n      if (message.senderAddress !== xmtp.address) {\n        console.log(\n          `[INFO] {XMTPService} New message received from ${message.senderAddress}: #${message?.id} ${message?.content}`\n        );\n        this.messages$.next([\n          ...this.messages$.getValue(),\n          {\n            messagesInConversation: [message]\n          }\n        ]);\n      }\n      break;\n    }\n  }\n\n}","import { IEncryptionService } from \"@hexa/interfaces\";\n\n/**\n * Strategy pattern for encryption and decryption services\n */\nexport class EncryptionStrategy implements IEncryptionService {\n\n  private _lib!:IEncryptionService;\n  \n  setStrategy(lib: IEncryptionService) {\n    this._lib = lib;\n  }\n\n  async encryptData(data: string, authorizedIDs: string[] = []) {\n    return this._lib.encryptData(data, authorizedIDs);\n  }\n\n  async decryptData(data: {\n    [key: string]: any;\n  }) {\n    return this._lib.decryptData(data);\n  }\n\n}","export * from './encryption.strategy';\nexport * from './ipfs-pinning.strategy';\n","import { Injectable } from \"@angular/core\";\nimport { IPiningService, Strategy } from \"@hexa/interfaces\";\n\n\n/**\n * Strategy pattern for IPFS Pinning services\n */\n@Injectable()\nexport class IPFSPinningStrategy extends Strategy<IPiningService> {\n  public readonly strategyType = 'ipfs-pinning';\n  private AVAILABLE_STRATEGY!: Map<string, IPiningService>;\n\n  constructor(libs: Map<string, IPiningService>) {\n    super();\n    this.AVAILABLE_STRATEGY = libs;\n  }\n\n  override setStrategy<T>(name: T|'pinata'|'web3storage'): void {\n    const lib = this.AVAILABLE_STRATEGY.get(name as string);\n    if (!lib) {\n      throw new Error(`Unsupported strategy: [${name}]. Please check the available strategies and try again.`);\n    }\n    super.setStrategy(lib);\n  }\n  \n  async pin(hash: string): Promise<void> {\n    return this._lib.pin(hash);\n  }\n\n  async unpin(hash: string): Promise<void> {\n    return this._lib.unpin(hash);\n  }\n\n}","export const environment = {\n  version: process.env['NG_APP_VERSION'],\n  production: true,\n  defaultChain: 'ethereum',\n  ipfs: {\n    pinning_service_token: process.env['NG_APP_PINNING_JWT'],\n    pinning_service_endpoint: process.env['NG_APP_PINNING_ENDPOINT'],\n    unpinning_service_endpoint: process.env['NG_APP_UNPINNING_ENDPOINT'],\n    api_endpoint: process.env['NG_APP_IPFS_API_ENDPOINT'],\n  },\n  auth: {\n    apikey: process.env['NG_APP_AUTH_APIKEY']\n  },\n  wallet: {\n    '0xapiKey': process.env['NG_APP_0xAPIKEY'],\n  },\n  availableChainsId: {\n    // ETH\n    '1': 'ethereum', // mainnet\n    // '3': 'ropsten',\n    // '4': 'rinkeby',\n    // POLYGON\n    // '89': 'polygon', // mainnet\n    // '13881': 'mumbai',\n    // BNB\n    // '38': 'binance smart chain', // mainnet\n    // '61': 'binance smart chain testnet',\n  }\n};","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nconst disableConsole = () => {\n  // disabling console.log in production\n  window.console.log = (...data: any[]) => ({});\n  // disabling console.warn in production\n  window.console.warn = (...data: any[]) => ({});\n  // disabling console.error in production\n  window.console.error = (...data: any[]) => ({});\n  // disabling console.info in production\n  window.console.info = (...data: any[]) => ({});\n  // disabling console.debug in production\n  window.console.debug = (...data: any[]) => ({});\n}\n\nif (environment.production) {\n  enableProdMode();\n  disableConsole();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  // Call the element loader after the platform has been bootstrapped\n  .then(()=> defineCustomElements(window))\n  // Global handler for unhandled promise rejections\n  .catch((err) => console.error(err));\n","import { IStrategy } from \"../services/strategy.interface\";\n\nexport abstract class Strategy<T> implements IStrategy<T> {\n  abstract readonly strategyType: string;\n  protected _lib!: T;\n\n  setStrategy(lib: T) {\n    this._lib = lib;\n  }\n}","export * from './services/datastore-service.interface';\nexport * from './services/identity-service.interface';\nexport * from './services/ipfs-service.interface';\nexport * from './services/pining-service.interface';\nexport * from './services/auth-service.interface';\nexport * from './services/encryption-service.interface';\nexport * from './services/notification-service.interface';\nexport * from './services/loading-service.interface';\nexport * from './services/messaging-service.interface';\nexport * from './services/prompt-strategy-service.interface';\nexport * from './services/wallet-service.interface';\nexport * from './services/wallet-utils.interface';\n\nexport * from './abstracts/strategy';\n\nexport * from './objects/token.interface';\n","export * from './lib/token-injection';\nexport * from './lib/token.enum';\n\n","import { InjectionToken } from \"@angular/core\";\nimport { IAuthService, IGetTokensBalances, IMessagingService, INotificationService, IPiningServiceConfig } from \"@hexa/interfaces\";\nimport { TOKENS_NAME } from \"./token.enum\";\n\nconst APP_DID_SERVICE_TOKEN = new InjectionToken<IAuthService>('APP_DID_SERVICE');\nconst APP_WEB3AUTH_SERVICE_TOKEN = new InjectionToken<IAuthService>('APP_WEB3AUTH_SERVICE');\nconst APP_PINNING_SERVICE_DEFAULT_CONFIG_TOKEN = new InjectionToken<IPiningServiceConfig>('APP_PINNING_SERVICE_DEFAULT_CONFIG');\nconst APP_WALLET_SERVICE_APIKEYS_TOKEN = new InjectionToken<{[key: string]: any;}>(TOKENS_NAME.APP_WALLET_SERVICE_APIKEYS);\nconst APP_WALLET_UTILS_TOKEN = new InjectionToken<IGetTokensBalances>(TOKENS_NAME.APP_WALLET_UTILS);\nconst APP_MESSAGING_SERVICE_TOKEN = new InjectionToken<IMessagingService>('APP_MESSAGING_SERVICE');\nconst APP_NOTIFICATION_SERVICE_TOKEN = new InjectionToken<INotificationService>('APP_NOTIFICATION_SERVICE');\nconst APP_CERAMIC_SERVICE_TOKEN = new InjectionToken('APP_CERAMIC_SERVICE');\nconst APP_DATASTORE_SERVICE_TOKEN = new InjectionToken('APP_DATASTORE_SERVICE');\nconst APP_DID_ENCRYPTION_SERVICE_TOKEN = new InjectionToken('APP_DID_ENCRYPTION_SERVICE');\nconst APP_ENCRYPTION_SERVICE_TOKEN = new InjectionToken('APP_ENCRYPTION_SERVICE');\nconst APP_IS_PROD_TOKEN = new InjectionToken('APP_IS_PROD');\nconst APP_LOADER_SERVICE_TOKEN = new InjectionToken('APP_LOADER_SERVICE');\nconst APP_PINATA_SERVICE_TOKEN = new InjectionToken('APP_PINATA_SERVICE');\nconst APP_WEB3STORAGE_SERVICE_TOKEN = new InjectionToken('APP_WEB3STORAGE_SERVICE');\nconst APP_IPFS_PINNING_SERVICE_TOKEN = new InjectionToken('APP_IPFS_PINNING_SERVICE');\nconst APP_IPFS_SERVICE_TOKEN = new InjectionToken('APP_IPFS_SERVICE');\nconst APP_PROMPT_STRATEGY_SERVICE_TOKEN = new InjectionToken('APP_PROMPT_STRATEGY_SERVICE');\nconst APP_AUTH_APIKEY_TOKEN = new InjectionToken('APP_AUTH_APIKEY');\n\nconst TOKENS_MAP = new Map();\nTOKENS_MAP.set('APP_DID_SERVICE', APP_DID_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_WEB3AUTH_SERVICE', APP_WEB3AUTH_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_PINNING_SERVICE_DEFAULT_CONFIG', APP_PINNING_SERVICE_DEFAULT_CONFIG_TOKEN);\nTOKENS_MAP.set(TOKENS_NAME.APP_WALLET_SERVICE_APIKEYS, APP_WALLET_SERVICE_APIKEYS_TOKEN);\nTOKENS_MAP.set(TOKENS_NAME.APP_WALLET_UTILS, APP_WALLET_UTILS_TOKEN);\nTOKENS_MAP.set('APP_MESSAGING_SERVICE', APP_MESSAGING_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_NOTIFICATION_SERVICE', APP_NOTIFICATION_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_CERAMIC_SERVICE', APP_CERAMIC_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_DATASTORE_SERVICE', APP_DATASTORE_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_DID_ENCRYPTION_SERVICE', APP_DID_ENCRYPTION_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_ENCRYPTION_SERVICE', APP_ENCRYPTION_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_IS_PROD', APP_IS_PROD_TOKEN);\nTOKENS_MAP.set('APP_LOADER_SERVICE', APP_LOADER_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_PINATA_SERVICE', APP_PINATA_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_WEB3STORAGE_SERVICE', APP_WEB3STORAGE_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_IPFS_PINNING_SERVICE', APP_IPFS_PINNING_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_IPFS_SERVICE', APP_IPFS_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_PROMPT_STRATEGY_SERVICE', APP_PROMPT_STRATEGY_SERVICE_TOKEN);\nTOKENS_MAP.set('APP_AUTH_APIKEY', APP_AUTH_APIKEY_TOKEN);\n\nexport function getInjectionToken(tokenName: string) {\n  return TOKENS_MAP.get(tokenName);\n}\n","export enum TOKENS_NAME  {\n  APP_DID_SERVICE = 'APP_DID_SERVICE',\n  APP_WEB3AUTH_SERVICE = 'APP_WEB3AUTH_SERVICE',\n  APP_PINNING_SERVICE_DEFAULT_CONFIG = 'APP_PINNING_SERVICE_DEFAULT_CONFIG',\n  APP_WALLET_SERVICE_APIKEYS = 'APP_WALLET_SERVICE_APIKEYS',\n  APP_WALLET_UTILS = 'APP_WALLET_UTILS',\n  APP_MESSAGING_SERVICE = 'APP_MESSAGING_SERVICE',\n  APP_NOTIFICATION_SERVICE = 'APP_NOTIFICATION_SERVICE',\n  APP_CERAMIC_SERVICE = 'APP_CERAMIC_SERVICE',\n  APP_DATASTORE_SERVICE = 'APP_DATASTORE_SERVICE',\n  APP_DID_ENCRYPTION_SERVICE = 'APP_DID_ENCRYPTION_SERVICE',\n  APP_ENCRYPTION_SERVICE = 'APP_ENCRYPTION_SERVICE',\n  APP_IS_PROD = 'APP_IS_PROD',\n  APP_LOADER_SERVICE = 'APP_LOADER_SERVICE',\n  APP_PINATA_SERVICE = 'APP_PINATA_SERVICE',\n  APP_WEB3STORAGE_SERVICE = 'APP_WEB3STORAGE_SERVICE',\n  APP_IPFS_PINNING_SERVICE = 'APP_IPFS_PINNING_SERVICE',\n  APP_IPFS_SERVICE = 'APP_IPFS_SERVICE',\n  APP_PROMPT_STRATEGY_SERVICE = 'APP_PROMPT_STRATEGY_SERVICE',\n  APP_AUTH_APIKEY = 'APP_AUTH_APIKEY',\n}\n","var map = {\n\t\"./ion-accordion_2.entry.js\": [\n\t\t70079,\n\t\t8592,\n\t\t79\n\t],\n\t\"./ion-action-sheet.entry.js\": [\n\t\t25593,\n\t\t8592,\n\t\t5593\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t13225,\n\t\t8592,\n\t\t3225\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t4812,\n\t\t8592,\n\t\t4812\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t86655,\n\t\t6655\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t44856,\n\t\t8592,\n\t\t4856\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t13059,\n\t\t3059\n\t],\n\t\"./ion-breadcrumb_2.entry.js\": [\n\t\t58648,\n\t\t8592,\n\t\t8648\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t98308,\n\t\t8308\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t44690,\n\t\t4690\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t64090,\n\t\t4090\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t36214,\n\t\t6214\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t69447,\n\t\t9447\n\t],\n\t\"./ion-datetime-button.entry.js\": [\n\t\t17950,\n\t\t9022,\n\t\t7950\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t79689,\n\t\t9022,\n\t\t8592,\n\t\t9689\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t18840,\n\t\t8592,\n\t\t8840\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t40749,\n\t\t749\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t69667,\n\t\t8592,\n\t\t9667\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t83288,\n\t\t8592,\n\t\t3288\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t35473,\n\t\t8592,\n\t\t5473\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t53634,\n\t\t8592,\n\t\t3634\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t22855,\n\t\t2855\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t495,\n\t\t8592,\n\t\t495\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t58737,\n\t\t8592,\n\t\t8737\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t99632,\n\t\t8592,\n\t\t9632\n\t],\n\t\"./ion-picker-column-internal.entry.js\": [\n\t\t54446,\n\t\t8592,\n\t\t4446\n\t],\n\t\"./ion-picker-internal.entry.js\": [\n\t\t32275,\n\t\t2275\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t48050,\n\t\t8592,\n\t\t8050\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t18994,\n\t\t8994\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t23592,\n\t\t3592\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t35454,\n\t\t8592,\n\t\t5454\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t290,\n\t\t8592,\n\t\t290\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t92666,\n\t\t8592,\n\t\t2666\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t64816,\n\t\t4816\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t45534,\n\t\t5534\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t94902,\n\t\t8592,\n\t\t4902\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t91938,\n\t\t8592,\n\t\t1938\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t78179,\n\t\t8179\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t90668,\n\t\t668\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t61624,\n\t\t8592,\n\t\t1624\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t19989,\n\t\t9989\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t28902,\n\t\t8592,\n\t\t8902\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t70199,\n\t\t8592,\n\t\t199\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t48395,\n\t\t8395\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t96357,\n\t\t6357\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t38268,\n\t\t8268\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t15269,\n\t\t8592,\n\t\t5269\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t32875,\n\t\t2875\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 50863;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./pwa-action-sheet.entry.js\": [\n\t\t45464,\n\t\t5464\n\t],\n\t\"./pwa-camera-modal-instance.entry.js\": [\n\t\t68724,\n\t\t8724\n\t],\n\t\"./pwa-camera-modal.entry.js\": [\n\t\t8145,\n\t\t8145\n\t],\n\t\"./pwa-camera.entry.js\": [\n\t\t30527,\n\t\t527\n\t],\n\t\"./pwa-toast.entry.js\": [\n\t\t44389,\n\t\t4389\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 55899;\nmodule.exports = webpackAsyncContext;","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["inject","Router","filter","firstValueFrom","getInjectionToken","TOKENS_NAME","AppGuard","constructor","APP_WEB3AUTH_SERVICE","APP_DID_SERVICE","canActivate","canActivateThisRoute","isAuthenticate","_didService","did$","value","authenticated","isReconnected","_isReconnect","_router","navigate","data","window","localStorage","getItem","previouslyConnectedWallets","JSON","parse","_authService","connectWallet","isWaiting$","pipe","isWaiting","factory","BrowserModule","RouterModule","CommonModule","ServiceWorkerModule","IonicModule","appRoutes","MAIN_COMPONENT","environment","PROVIDERS","AppModule","bootstrap","imports","forRoot","mode","initialNavigation","useHash","register","enabled","production","registrationStrategy","declarations","DashboardComponent","path","children","loadChildren","then","m","AuthModule","loadComponent","IpfsComponent","component","WelcomeModule","CalendarModule","DriveModule","WalletModule","NotesModule","redirectTo","pathMatch","EnvironmentInjector","i0","AppComponent","environmentInjector","isProd","loaderService","ngOnInit","version","env","console","log","APP_IS_PROD","APP_LOADER_SERVICE","selectors","decls","vars","consts","template","DOCUMENT","ActivatedRoute","IonPopover","IonToggle","ToastController","BehaviorSubject","ctx_r8","ctx_r19","_route","_toastService","_document","_notificationService","_promptStrategy","name","url","sort","isEnabled","isVisible","a","b","f","isConnected$","account$","_checkDarkModeSetting","sub","notifications$","subscribe","messages","length","displayNotification","content","_subs","push","params","id","_id","snapshot","parent","ngOnDestroy","forEach","unsubscribe","togglePage","streamId","toogleNotification","popoverElement","toggleElement","disabled","message","isConnected","disconnect","connect","catch","dismiss","ionToast","create","duration","cssClass","icon","position","buttons","text","role","present","setupIPFSPinService","userData","profile$","config","askSetupService","token","serviceName","updateProfilData","ipfsConfig","toggleDarkMode","$event","body","classList","toggle","isDarkmode","contains","defaultView","setItem","toString","isDarkMode$","next","copyAccountAddressToClipboard","account","navigator","clipboard","writeText","color","toast","isSettingSaved","add","remove","APP_NOTIFICATION_SERVICE","APP_PROMPT_STRATEGY_SERVICE","ctx","UpdateComponent","COMPONENTS","SwUpdate","map","merge","of","Subject","updates","_toast","updateAvailable$","versionUpdates","e","type","_displayNotif","closed$","activateUpdate","location","reload","showCloseButton","closeButtonText","onDidDismiss","AddressToAvatarPipe","transform","theme","blockies","default","pure","defaultValue","ipfs","pinning_service_token","API_CONFIG_PROVIDER","provide","APP_WALLET_SERVICE_APIKEYS","useValue","wallet","APP_PINNING_SERVICE_DEFAULT_CONFIG","APP_AUTH_APIKEY","auth","apikey","DIDService","Web3AuthService","LocalAuthService","LocalDIDServcie","AUTHENTICATION_PROVIDER","useClass","includes","NotificationService","XMTPService","COMMUNICATION_PROVIDER","APP_MESSAGING_SERVICE","CeramicClient","DatastoreService","LocalDatastoreServcie","DATABASE_PROVIDER","APP_CERAMIC_SERVICE","useFactory","public_node","hexaCeramicNode","CERAMIC_CLIENT","APP_DATASTORE_SERVICE","DIDEncryptionService","LocalEncryptionService","EncryptionStrategy","ENCRYPTION_PROVIDER","APP_DID_ENCRYPTION_SERVICE","APP_ENCRYPTION_SERVICE","encryptLib","strategy","setStrategy","deps","ErrorHandler","GlobalErrorHandlerService","ERROR_PROVIDER","IS_PROD_PROVIDER","LOADER_PROVIDER","MEDIA_STORAGE_PROVIDER","PROMPT_STRATEGY_PROVIDER","debounceTime","distinctUntilChanged","LOADERCLIENT","setStatus","status","isVisible$","asObservable","IPFSService","PinataService","LocalIPFSService","Web3storageService","IPFSPinningStrategy","APP_PINATA_SERVICE","APP_WEB3STORAGE_SERVICE","APP_IPFS_SERVICE","APP_IPFS_PINNING_SERVICE","authService","pinata","web3","profil","mapStrategy","Map","set","pin","hash","unpin","PromptStrategyService","DIDDataStore","TileDocument","IIdentityService","LoadingController","_ceramic","_did","_isProd","_loaderService","schemas","basicProfile","definitions","BasicProfile","tiles","ceramic","model","aliases","datastore","_datastore","getData","family","tags","familyTag","doc","_getDocument","loadData","load","saveData","controller","_getAuthorizedDidID","Error","deterministic","controllers","update","haveEmptyContent","Object","keys","ionLoader","keyboardClose","hasParent","key","join","existKey","newValue","stringify","Date","now","_identityService","encryptData","authorizedDID","unit8Data","TextEncoder","encode","did","didID","createJWE","jwe","error","decryptData","decryptedJWEunit8Data","decryptJWE","decryptedJWE","TextDecoder","decode","DID","EthereumAuthProvider","ThreeIdAuthProvider","ThreeIdConnect","EthSelfIDAuthProvider","SelfID","provider","ethereum","_auth","_authenticateWithEthereum","ethereumProvider","_connectWith3ID","authProvider","_threeID","getDidProvider","_authWithSelfID","selfID","authenticate","connectNetwork","threeidConnect","_selfId$","_saveLatestConnectionDateTime","NgZone","AlertController","_alertService","_zone","_loadingCtrl","handleError","indexOf","split","trim","run","existingLoader","getTop","existingAlert","appAlert","header","CID","DagAPI","IPiningService","disconect","_ipfsNode","dag","stop","file","s","nodeIsOnline","isOnline","cid","timeout","preload","progress","prog","getFromCID","asyncUint8Array","cat","blobsPart","chunk","File","getDag","dag$","cidFromString","existingKey","existingData","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","base64","result","onerror","response","fetch","blob","put","node","get","IAuthService","IMessagingService","tap","_loaderCtrl","_messagingService","messages$","messagesInConversation","flat","startsWith","_parseMessage","latestNotifedISODatetime","toISOString","t","setTimeout","clearTimeout","ionLoading","loadDatas","sendNotification","metaData","senderAddress","destinationAddress","filterKey","messageData","createdISODateTime","base64Data","btoa","sendMessage","base64Message","replace","prefixKey","b64messageArray","jsonMessage","atob","dataMessage","IPiningServiceConfig","profile","defaultConfig","hashToPin","method","headers","Headers","Authorization","res","json","err","valueExist","Boolean","isNotDefaultService","userWantSetup","_promptInfos","r","values","selectedService","_promptSelectService","apiConfig","promptAPIKeys","_promptAPIKeys","ctrl","alertUI","subHeader","inputs","label","checked","availableService","urlAPI","find","placeholder","ethers","Magic","WebAuthnExtension","recoverPersonalSignature","IDatastoreService","IAuthUser","getResolver","get3IDResolver","Caip10Link","DB_NAME","MAINNET_RPC_URL","MATIC_RPC_URL","_msgService","_authApiKey","_magicWeb3","accountToConnect","_connectWithMagic","ethersProvider","providers","Web3Provider","ethAccounts","send","isOwner","signAndVerify","getSigner","_connectDID","latestConnectionISODatetime","ethereumProvider$","signer$","on","accounts","newNetwork","oldNetwork","_connectOthersServices","address","magic","removeItem","_redirectToRoot","getAccountDID","chainParam","link","fromAccount","signer","signedMessage","signMessage","recoveredAddress","signature","toLocaleLowerCase","accountAddress","isDIDConnected","resolvers","setResolver","isAuth","rpcProvider","connectWithUI","customNodeOptions","_getRPCNodeOptions","network","extensions","RPC_NODE_OPTIONS","rpcUrl","chainId","defaultChainId","chainIdAsDecimal","Number","BigInt","nodeOps","n","navigateByUrl","getProfilData","mostRecentDate","getTime","shift","opts","startTime","endTime","undefined","init","creationISODatetime","_setLocalUser","Client","IBaseMessage","_xmtp","xmtp","web3Provider","ops","_web3Provider","_ops","_isProduction","conversationId","options","conversations","_getConversations","_conversations","_getPreviousMessagesFromExistingConverstion","_listenAllUpcomingMessages","getValue","close","conversation","c","peerAddress","newConversation","_startNewConversation","metadata","allConversations","list","convo","context","setDate","getDate","streamAllMessages","lib","_lib","authorizedIDs","Strategy","libs","AVAILABLE_STRATEGY","process","defaultChain","pinning_service_endpoint","unpinning_service_endpoint","api_endpoint","availableChainsId","enableProdMode","defineCustomElements","disableConsole","warn","info","debug","__NgCli_bootstrap_1","bootstrapModule","InjectionToken","APP_DID_SERVICE_TOKEN","APP_WEB3AUTH_SERVICE_TOKEN","APP_PINNING_SERVICE_DEFAULT_CONFIG_TOKEN","APP_WALLET_SERVICE_APIKEYS_TOKEN","APP_WALLET_UTILS_TOKEN","APP_WALLET_UTILS","APP_MESSAGING_SERVICE_TOKEN","APP_NOTIFICATION_SERVICE_TOKEN","APP_CERAMIC_SERVICE_TOKEN","APP_DATASTORE_SERVICE_TOKEN","APP_DID_ENCRYPTION_SERVICE_TOKEN","APP_ENCRYPTION_SERVICE_TOKEN","APP_IS_PROD_TOKEN","APP_LOADER_SERVICE_TOKEN","APP_PINATA_SERVICE_TOKEN","APP_WEB3STORAGE_SERVICE_TOKEN","APP_IPFS_PINNING_SERVICE_TOKEN","APP_IPFS_SERVICE_TOKEN","APP_PROMPT_STRATEGY_SERVICE_TOKEN","APP_AUTH_APIKEY_TOKEN","TOKENS_MAP","tokenName"],"sourceRoot":"webpack:///","x_google_ignoreList":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61]}